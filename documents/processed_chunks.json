[
  {
    "content": "Provided proper attribution is provided, Google hereby grants permission to\nreproduce the tables and figures in this paper solely for use in journalistic or\nscholarly works.\nAttention Is All You Need\nAshish Vaswani∗\nGoogle Brain\navaswani@google.comNoam Shazeer∗\nGoogle Brain\nnoam@google.comNiki Parmar∗\nGoogle Research\nnikip@google.comJakob Uszkoreit∗\nGoogle Research\nusz@google.com\nLlion Jones∗\nGoogle Research\nllion@google.comAidan N. Gomez∗ †\nUniversity of Toronto\naidan@cs.toronto.eduŁukasz Kaiser∗\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin∗ ‡\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 0,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "mechanism. We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring significantly\nless time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.8 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature. We show that the Transformer generalizes well to\nother tasks by applying it successfully to English constituency parsing both with\nlarge and limited training data.",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 1,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "best models from the literature. We show that the Transformer generalizes well to\nother tasks by applying it successfully to English constituency parsing both with\nlarge and limited training data.\n∗Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and\nhas been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and\nefficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 2,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "efficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n†Work performed while at Google Brain.\n‡Work performed while at Google Research.\n31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.arXiv:1706.03762v7  [cs.CL]  2 Aug 2023\n1 Introduction\nRecurrent neural networks, long short-term memory [ 13] and gated recurrent [ 7] neural networks\nin particular, have been firmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 35,2,5]. Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [38, 24, 15].\nRecurrent models typically factor computation along the symbol positions of the input and output",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 3,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "architectures [38, 24, 15].\nRecurrent models typically factor computation along the symbol positions of the input and output\nsequences. Aligning the positions to steps in computation time, they generate a sequence of hidden\nstates ht, as a function of the previous hidden state ht−1and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. Recent work has achieved\nsignificant improvements in computational efficiency through factorization tricks [ 21] and conditional\ncomputation [ 32], while also improving model performance in case of the latter. The fundamental\nconstraint of sequential computation, however, remains.\nAttention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 4,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,19]. In all but a few cases [ 27], however, such attention mechanisms\nare used in conjunction with a recurrent network.\nIn this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\nThe Transformer allows for significantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[16], ByteNet [ 18] and ConvS2S [ 9], all of which use convolutional neural networks as basic building",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 5,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[16], ByteNet [ 18] and ConvS2S [ 9], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes\nit more difficult to learn dependencies between distant positions [ 12]. In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\nSelf-attention, sometimes called intra-attention is an attention mechanism relating different positions",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 6,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "described in section 3.2.\nSelf-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 27, 28, 22].\nEnd-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [34].\nTo the best of our knowledge, however, the Transformer is the first transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. In the following sections, we will describe the Transformer, motivate",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 7,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "aligned RNNs or convolution. In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [17, 18] and [9].\n3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,35].\nHere, the encoder maps an input sequence of symbol representations (x1, ..., x n)to a sequence\nof continuous representations z= (z1, ..., z n). Given z, the decoder then generates an output\nsequence (y1, ..., y m)of symbols one element at a time. At each step the model is auto-regressive\n[10], consuming the previously generated symbols as additional input when generating the next.\n2\nFigure 1: The Transformer - model architecture.\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n3.1 Encoder and Decoder Stacks",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 8,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. Each layer has two\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-\nwise fully connected feed-forward network. We employ a residual connection [ 11] around each of\nthe two sub-layers, followed by layer normalization [ 1]. That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer( x)is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\nDecoder: The decoder is also composed of a stack of N= 6identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 9,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "Decoder: The decoder is also composed of a stack of N= 6identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\n3\nScaled Dot-Product Attention\n Multi-Head Attention",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 10,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "where the query, keys, values, and output are all vectors. The output is computed as a weighted sum\n3\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several\nattention layers running in parallel.\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists of\nqueries and keys of dimension dk, and values of dimension dv. We compute the dot products of the\nquery with all keys, divide each by√dk, and apply a softmax function to obtain the weights on the\nvalues.\nIn practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. We compute\nthe matrix of outputs as:",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 11,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "into a matrix Q. The keys and values are also packed together into matrices KandV. We compute\nthe matrix of outputs as:\nAttention( Q, K, V ) = softmax(QKT\n√dk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor\nof1√dk. Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-efficient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\nWhile for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 12,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "dk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. To counteract this effect, we scale the dot products by1√dk.\n3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it beneficial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\n4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. Then their dot product, q·k=Pdk\ni=1qiki, has mean 0and variance dk.\n4\noutput values. These are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 13,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "i=1qiki, has mean 0and variance dk.\n4\noutput values. These are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\nMultiHead( Q, K, V ) = Concat(head 1, ...,head h)WO\nwhere head i= Attention( QWQ\ni, KWK\ni, V WV\ni)\nWhere the projections are parameter matrices WQ\ni∈Rdmodel×dk,WK\ni∈Rdmodel×dk,WV\ni∈Rdmodel×dv\nandWO∈Rhdv×dmodel.\nIn this work we employ h= 8 parallel attention layers, or heads. For each of these we use\ndk=dv=dmodel/h= 64 . Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 14,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "is similar to that of single-head attention with full dimensionality.\n3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n•In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[38, 2, 9].\n•The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n•Similarly, self-attention layers in the decoder allow each position in the decoder to attend to",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 15,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "encoder.\n•Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to −∞) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.\n3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a ReLU activation in between.\nFFN( x) = max(0 , xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 16,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "FFN( x) = max(0 , xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 30]. In the embedding layers, we multiply those weights by√dmodel.\n5\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 17,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "5\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\nLayer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2·d) O(1) O(1)\nRecurrent O(n·d2) O(n) O(n)\nConvolutional O(k·n·d2) O(1) O(logk(n))\nSelf-Attention (restricted) O(r·n·d) O(1) O(n/r)\n3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the\nbottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 18,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the\nbottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. There are many choices of positional encodings,\nlearned and fixed [9].\nIn this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhere posis the position and iis the dimension. That is, each dimension of the positional encoding\ncorresponds to a sinusoid. The wavelengths form a geometric progression from 2πto10000 ·2π. We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any fixed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\nWe also experimented with using learned positional embeddings [ 9] instead, and found that the two",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 19,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "PEpos.\nWe also experimented with using learned positional embeddings [ 9] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1, ..., x n)to another sequence of equal length (z1, ..., z n), with xi, zi∈Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we\nconsider three desiderata.\nOne is the total computational complexity per layer. Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 20,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "One is the total computational complexity per layer. Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\nThe third is the path length between long-range dependencies in the network. Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 12]. Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\nAs noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. In terms of",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 21,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "executed operations, whereas a recurrent layer requires O(n)sequential operations. In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\n6\nlength nis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[38] and byte-pair [ 31] representations. To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\nthe input sequence centered around the respective output position. This would increase the maximum\npath length to O(n/r). We plan to investigate this approach further in future work.\nA single convolutional layer with kernel width k < n does not connect all pairs of input and output\npositions. Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 22,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "positions. Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 18], increasing the length of the longest paths\nbetween any two positions in the network. Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k·n·d+n·d2). Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\nAs side benefit, self-attention could yield more interpretable models. We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n5 Training",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 23,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n5 Training\nThis section describes the training regime for our models.\n5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 38]. Sentence pairs were batched together by approximate sequence length. Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 24,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "target tokens.\n5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. We\ntrained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps\n(3.5 days).\n5.3 Optimizer\nWe used the Adam optimizer [ 20] with β1= 0.9,β2= 0.98andϵ= 10−9. We varied the learning\nrate over the course of training, according to the formula:\nlrate =d−0.5\nmodel·min(step_num−0.5, step _num·warmup _steps−1.5) (3)\nThis corresponds to increasing the learning rate linearly for the first warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. We used\nwarmup _steps = 4000 .\n5.4 Regularization\nWe employ three types of regularization during training:\n7",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 25,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "and decreasing it thereafter proportionally to the inverse square root of the step number. We used\nwarmup _steps = 4000 .\n5.4 Regularization\nWe employ three types of regularization during training:\n7\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\nModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [18] 23.75\nDeep-Att + PosUnk [39] 39.2 1.0·1020\nGNMT + RL [38] 24.6 39.92 2.3·10191.4·1020\nConvS2S [9] 25.16 40.46 9.6·10181.5·1020\nMoE [32] 26.03 40.56 2.0·10191.2·1020\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0·1020\nGNMT + RL Ensemble [38] 26.30 41.16 1.8·10201.1·1021\nConvS2S Ensemble [9] 26.36 41.29 7.7·10191.2·1021\nTransformer (base model) 27.3 38.1 3.3·1018\nTransformer (big) 28.4 41.8 2.3·1019\nResidual Dropout We apply dropout [ 33] to the output of each sub-layer, before it is added to the",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 26,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "Transformer (base model) 27.3 38.1 3.3·1018\nTransformer (big) 28.4 41.8 2.3·1019\nResidual Dropout We apply dropout [ 33] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop= 0.1.\nLabel Smoothing During training, we employed label smoothing of value ϵls= 0.1[36]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\nlisted in the bottom line of Table 3. Training took 3.5days on 8P100 GPUs. Even our base model",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 27,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "BLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\nlisted in the bottom line of Table 3. Training took 3.5days on 8P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4and length penalty α= 0.6[38]. These hyperparameters",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 28,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4and length penalty α= 0.6[38]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [38].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of floating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision floating-point capacity of each GPU5.\n6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 29,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "To evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n8\nTable 3: Variations on the Transformer architecture. Unlisted values are identical to those of the base\nmodel. All metrics are on the English-to-German translation development set, newstest2013. Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\nN d model dff h d k dvPdrop ϵlstrain PPL BLEU params\nsteps (dev) (dev) ×106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 30,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\ndevelopment set, newstest2013. We used beam search as described in the previous section, but no\ncheckpoint averaging. We present these results in Table 3.\nIn Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 31,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "In Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 9], and observe nearly identical\nresults to the base model.\n6.3 English Constituency Parsing\nTo evaluate if the Transformer can generalize to other tasks we performed experiments on English\nconstituency parsing. This task presents specific challenges: the output is subject to strong structural\nconstraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence\nmodels have not been able to attain state-of-the-art results in small-data regimes [37].",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 32,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence\nmodels have not been able to attain state-of-the-art results in small-data regimes [37].\nWe trained a 4-layer transformer with dmodel = 1024 on the Wall Street Journal (WSJ) portion of the\nPenn Treebank [ 25], about 40K training sentences. We also trained it in a semi-supervised setting,\nusing the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences\n[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens\nfor the semi-supervised setting.\nWe performed only a small number of experiments to select the dropout, both attention and residual\n(section 5.4), learning rates and beam size on the Section 22 development set, all other parameters\nremained unchanged from the English-to-German base translation model. During inference, we\n9",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 33,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "(section 5.4), learning rates and beam size on the Section 22 development set, all other parameters\nremained unchanged from the English-to-German base translation model. During inference, we\n9\nTable 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\nof WSJ)\nParser Training WSJ 23 F1\nVinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\nTransformer (4 layers) WSJ only, discriminative 91.3\nZhu et al. (2013) [40] semi-supervised 91.3\nHuang & Harper (2009) [14] semi-supervised 91.3\nMcClosky et al. (2006) [26] semi-supervised 92.1\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\nTransformer (4 layers) semi-supervised 92.7\nLuong et al. (2015) [23] multi-task 93.0\nDyer et al. (2016) [8] generative 93.3",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 34,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "Vinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\nTransformer (4 layers) semi-supervised 92.7\nLuong et al. (2015) [23] multi-task 93.0\nDyer et al. (2016) [8] generative 93.3\nincreased the maximum output length to input length + 300. We used a beam size of 21andα= 0.3\nfor both WSJ only and the semi-supervised setting.\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\nprisingly well, yielding better results than all previously reported models with the exception of the\nRecurrent Neural Network Grammar [8].\nIn contrast to RNN sequence-to-sequence models [ 37], the Transformer outperforms the Berkeley-\nParser [29] even when training only on the WSJ training set of 40K sentences.\n7 Conclusion\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 35,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 36,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\narXiv:1607.06450 , 2016.\n[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. CoRR , abs/1409.0473, 2014.\n[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . Le. Massive exploration of neural\nmachine translation architectures. CoRR , abs/1703.03906, 2017.\n[4]Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\nreading. arXiv preprint arXiv:1601.06733 , 2016.\n10\n[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 37,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "reading. arXiv preprint arXiv:1601.06733 , 2016.\n10\n[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. CoRR , abs/1406.1078, 2014.\n[6]Francois Chollet. Xception: Deep learning with depthwise separable convolutions. arXiv\npreprint arXiv:1610.02357 , 2016.\n[7]Junyoung Chung, Çaglar Gülçehre, Kyunghyun Cho, and Yoshua Bengio. Empirical evaluation\nof gated recurrent neural networks on sequence modeling. CoRR , abs/1412.3555, 2014.\n[8]Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros, and Noah A. Smith. Recurrent neural\nnetwork grammars. In Proc. of NAACL , 2016.\n[9]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. Convolu-\ntional sequence to sequence learning. arXiv preprint arXiv:1705.03122v2 , 2017.\n[10] Alex Graves. Generating sequences with recurrent neural networks. arXiv preprint\narXiv:1308.0850 , 2013.",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 38,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "tional sequence to sequence learning. arXiv preprint arXiv:1705.03122v2 , 2017.\n[10] Alex Graves. Generating sequences with recurrent neural networks. arXiv preprint\narXiv:1308.0850 , 2013.\n[11] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-\nage recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770–778, 2016.\n[12] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and Jürgen Schmidhuber. Gradient flow in\nrecurrent nets: the difficulty of learning long-term dependencies, 2001.\n[13] Sepp Hochreiter and Jürgen Schmidhuber. Long short-term memory. Neural computation ,\n9(8):1735–1780, 1997.\n[14] Zhongqiang Huang and Mary Harper. Self-training PCFG grammars with latent annotations\nacross languages. In Proceedings of the 2009 Conference on Empirical Methods in Natural\nLanguage Processing , pages 832–841. ACL, August 2009.",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 39,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "across languages. In Proceedings of the 2009 Conference on Empirical Methods in Natural\nLanguage Processing , pages 832–841. ACL, August 2009.\n[15] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring\nthe limits of language modeling. arXiv preprint arXiv:1602.02410 , 2016.\n[16] Łukasz Kaiser and Samy Bengio. Can active memory replace attention? In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n[17] Łukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conference\non Learning Representations (ICLR) , 2016.\n[18] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. Neural machine translation in linear time. arXiv preprint arXiv:1610.10099v2 ,\n2017.\n[19] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks.\nInInternational Conference on Learning Representations , 2017.",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 40,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "2017.\n[19] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks.\nInInternational Conference on Learning Representations , 2017.\n[20] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR , 2015.\n[21] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. arXiv preprint\narXiv:1703.10722 , 2017.\n[22] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. A structured self-attentive sentence embedding. arXiv preprint\narXiv:1703.03130 , 2017.\n[23] Minh-Thang Luong, Quoc V . Le, Ilya Sutskever, Oriol Vinyals, and Lukasz Kaiser. Multi-task\nsequence to sequence learning. arXiv preprint arXiv:1511.06114 , 2015.\n[24] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-\nbased neural machine translation. arXiv preprint arXiv:1508.04025 , 2015.\n11",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 41,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "[24] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-\nbased neural machine translation. arXiv preprint arXiv:1508.04025 , 2015.\n11\n[25] Mitchell P Marcus, Mary Ann Marcinkiewicz, and Beatrice Santorini. Building a large annotated\ncorpus of english: The penn treebank. Computational linguistics , 19(2):313–330, 1993.\n[26] David McClosky, Eugene Charniak, and Mark Johnson. Effective self-training for parsing. In\nProceedings of the Human Language Technology Conference of the NAACL, Main Conference ,\npages 152–159. ACL, June 2006.\n[27] Ankur Parikh, Oscar Täckström, Dipanjan Das, and Jakob Uszkoreit. A decomposable attention\nmodel. In Empirical Methods in Natural Language Processing , 2016.\n[28] Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractive\nsummarization. arXiv preprint arXiv:1705.04304 , 2017.\n[29] Slav Petrov, Leon Barrett, Romain Thibaux, and Dan Klein. Learning accurate, compact,",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 42,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "summarization. arXiv preprint arXiv:1705.04304 , 2017.\n[29] Slav Petrov, Leon Barrett, Romain Thibaux, and Dan Klein. Learning accurate, compact,\nand interpretable tree annotation. In Proceedings of the 21st International Conference on\nComputational Linguistics and 44th Annual Meeting of the ACL , pages 433–440. ACL, July\n2006.\n[30] Ofir Press and Lior Wolf. Using the output embedding to improve language models. arXiv\npreprint arXiv:1608.05859 , 2016.\n[31] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare words\nwith subword units. arXiv preprint arXiv:1508.07909 , 2015.\n[32] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. arXiv preprint arXiv:1701.06538 , 2017.\n[33] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 43,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "layer. arXiv preprint arXiv:1701.06538 , 2017.\n[33] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. Dropout: a simple way to prevent neural networks from overfitting. Journal of Machine\nLearning Research , 15(1):1929–1958, 2014.\n[34] Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston, and Rob Fergus. End-to-end memory\nnetworks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440–2448. Curran Associates,\nInc., 2015.\n[35] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to sequence learning with neural\nnetworks. In Advances in Neural Information Processing Systems , pages 3104–3112, 2014.\n[36] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\nRethinking the inception architecture for computer vision. CoRR , abs/1512.00567, 2015.",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 44,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "[36] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\nRethinking the inception architecture for computer vision. CoRR , abs/1512.00567, 2015.\n[37] Vinyals & Kaiser, Koo, Petrov, Sutskever, and Hinton. Grammar as a foreign language. In\nAdvances in Neural Information Processing Systems , 2015.\n[38] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machine\ntranslation system: Bridging the gap between human and machine translation. arXiv preprint\narXiv:1609.08144 , 2016.\n[39] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. Deep recurrent models with\nfast-forward connections for neural machine translation. CoRR , abs/1606.04199, 2016.\n[40] Muhua Zhu, Yue Zhang, Wenliang Chen, Min Zhang, and Jingbo Zhu. Fast and accurate\nshift-reduce constituent parsing. In Proceedings of the 51st Annual Meeting of the ACL (Volume",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 45,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "[40] Muhua Zhu, Yue Zhang, Wenliang Chen, Min Zhang, and Jingbo Zhu. Fast and accurate\nshift-reduce constituent parsing. In Proceedings of the 51st Annual Meeting of the ACL (Volume\n1: Long Papers) , pages 434–443. ACL, August 2013.\n12\nAttention Visualizations\nInput-Input Layer5\nIt\nis\nin\nthis\nspirit\nthat\na\nmajority\nof\nAmerican\ngovernments\nhave\npassed\nnew\nlaws\nsince\n2009\nmaking\nthe\nregistration\nor\nvoting\nprocess\nmore\ndifficult\n.\n<EOS>\n<pad>\n<pad>\n<pad>\n<pad>\n<pad>\n<pad>\nIt\nis\nin\nthis\nspirit\nthat\na\nmajority\nof\nAmerican\ngovernments\nhave\npassed\nnew\nlaws\nsince\n2009\nmaking\nthe\nregistration\nor\nvoting\nprocess\nmore\ndifficult\n.\n<EOS>\n<pad>\n<pad>\n<pad>\n<pad>\n<pad>\n<pad>\nFigure 3: An example of the attention mechanism following long-distance dependencies in the\nencoder self-attention in layer 5 of 6. Many of the attention heads attend to a distant dependency of\nthe verb ‘making’, completing the phrase ‘making...more difficult’. Attentions here shown only for",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 46,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "the verb ‘making’, completing the phrase ‘making...more difficult’. Attentions here shown only for\nthe word ‘making’. Different colors represent different heads. Best viewed in color.\n13\nInput-Input Layer5\nThe\nLaw\nwill\nnever\nbe\nperfect\n,\nbut\nits\napplication\nshould\nbe\njust\n-\nthis\nis\nwhat\nwe\nare\nmissing\n,\nin\nmy\nopinion\n.\n<EOS>\n<pad>\nThe\nLaw\nwill\nnever\nbe\nperfect\n,\nbut\nits\napplication\nshould\nbe\njust\n-\nthis\nis\nwhat\nwe\nare\nmissing\n,\nin\nmy\nopinion\n.\n<EOS>\n<pad>\nInput-Input Layer5\nThe\nLaw\nwill\nnever\nbe\nperfect\n,\nbut\nits\napplication\nshould\nbe\njust\n-\nthis\nis\nwhat\nwe\nare\nmissing\n,\nin\nmy\nopinion\n.\n<EOS>\n<pad>\nThe\nLaw\nwill\nnever\nbe\nperfect\n,\nbut\nits\napplication\nshould\nbe\njust\n-\nthis\nis\nwhat\nwe\nare\nmissing\n,\nin\nmy\nopinion\n.\n<EOS>\n<pad>Figure 4: Two attention heads, also in layer 5 of 6, apparently involved in anaphora resolution. Top:\nFull attentions for head 5. Bottom: Isolated attentions from just the word ‘its’ for attention heads 5\nand 6. Note that the attentions are very sharp for this word.",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 47,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "Full attentions for head 5. Bottom: Isolated attentions from just the word ‘its’ for attention heads 5\nand 6. Note that the attentions are very sharp for this word.\n14\nInput-Input Layer5\nThe\nLaw\nwill\nnever\nbe\nperfect\n,\nbut\nits\napplication\nshould\nbe\njust\n-\nthis\nis\nwhat\nwe\nare\nmissing\n,\nin\nmy\nopinion\n.\n<EOS>\n<pad>\nThe\nLaw\nwill\nnever\nbe\nperfect\n,\nbut\nits\napplication\nshould\nbe\njust\n-\nthis\nis\nwhat\nwe\nare\nmissing\n,\nin\nmy\nopinion\n.\n<EOS>\n<pad>\nInput-Input Layer5\nThe\nLaw\nwill\nnever\nbe\nperfect\n,\nbut\nits\napplication\nshould\nbe\njust\n-\nthis\nis\nwhat\nwe\nare\nmissing\n,\nin\nmy\nopinion\n.\n<EOS>\n<pad>\nThe\nLaw\nwill\nnever\nbe\nperfect\n,\nbut\nits\napplication\nshould\nbe\njust\n-\nthis\nis\nwhat\nwe\nare\nmissing\n,\nin\nmy\nopinion\n.\n<EOS>\n<pad>Figure 5: Many of the attention heads exhibit behaviour that seems related to the structure of the\nsentence. We give two such examples above, from two different heads from the encoder self-attention\nat layer 5 of 6. The heads clearly learned to perform different tasks.\n15",
    "metadata": {
      "source": "attention_is_all_you_need",
      "description": "Attention Is All You Need - Transformer Paper",
      "chunk_id": 48,
      "total_chunks": 49,
      "file_type": "pdf"
    }
  },
  {
    "content": "BERT: Pre-training of Deep Bidirectional Transformers for\nLanguage Understanding\nJacob Devlin Ming-Wei Chang Kenton Lee Kristina Toutanova\nGoogle AI Language\nfjacobdevlin,mingweichang,kentonl,kristout g@google.com\nAbstract\nWe introduce a new language representa-\ntion model called BERT , which stands for\nBidirectional Encoder Representations from\nTransformers. Unlike recent language repre-\nsentation models (Peters et al., 2018a; Rad-\nford et al., 2018), BERT is designed to pre-\ntrain deep bidirectional representations from\nunlabeled text by jointly conditioning on both\nleft and right context in all layers. As a re-\nsult, the pre-trained BERT model can be ﬁne-\ntuned with just one additional output layer\nto create state-of-the-art models for a wide\nrange of tasks, such as question answering and\nlanguage inference, without substantial task-\nspeciﬁc architecture modiﬁcations.\nBERT is conceptually simple and empirically\npowerful. It obtains new state-of-the-art re-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 0,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "language inference, without substantial task-\nspeciﬁc architecture modiﬁcations.\nBERT is conceptually simple and empirically\npowerful. It obtains new state-of-the-art re-\nsults on eleven natural language processing\ntasks, including pushing the GLUE score to\n80.5% (7.7% point absolute improvement),\nMultiNLI accuracy to 86.7% (4.6% absolute\nimprovement), SQuAD v1.1 question answer-\ning Test F1 to 93.2 (1.5 point absolute im-\nprovement) and SQuAD v2.0 Test F1 to 83.1\n(5.1 point absolute improvement).\n1 Introduction\nLanguage model pre-training has been shown to\nbe effective for improving many natural language\nprocessing tasks (Dai and Le, 2015; Peters et al.,\n2018a; Radford et al., 2018; Howard and Ruder,\n2018). These include sentence-level tasks such as\nnatural language inference (Bowman et al., 2015;\nWilliams et al., 2018) and paraphrasing (Dolan\nand Brockett, 2005), which aim to predict the re-\nlationships between sentences by analyzing them",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 1,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "natural language inference (Bowman et al., 2015;\nWilliams et al., 2018) and paraphrasing (Dolan\nand Brockett, 2005), which aim to predict the re-\nlationships between sentences by analyzing them\nholistically, as well as token-level tasks such as\nnamed entity recognition and question answering,\nwhere models are required to produce ﬁne-grained\noutput at the token level (Tjong Kim Sang and\nDe Meulder, 2003; Rajpurkar et al., 2016).There are two existing strategies for apply-\ning pre-trained language representations to down-\nstream tasks: feature-based andﬁne-tuning . The\nfeature-based approach, such as ELMo (Peters\net al., 2018a), uses task-speciﬁc architectures that\ninclude the pre-trained representations as addi-\ntional features. The ﬁne-tuning approach, such as\nthe Generative Pre-trained Transformer (OpenAI\nGPT) (Radford et al., 2018), introduces minimal\ntask-speciﬁc parameters, and is trained on the\ndownstream tasks by simply ﬁne-tuning allpre-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 2,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "the Generative Pre-trained Transformer (OpenAI\nGPT) (Radford et al., 2018), introduces minimal\ntask-speciﬁc parameters, and is trained on the\ndownstream tasks by simply ﬁne-tuning allpre-\ntrained parameters. The two approaches share the\nsame objective function during pre-training, where\nthey use unidirectional language models to learn\ngeneral language representations.\nWe argue that current techniques restrict the\npower of the pre-trained representations, espe-\ncially for the ﬁne-tuning approaches. The ma-\njor limitation is that standard language models are\nunidirectional, and this limits the choice of archi-\ntectures that can be used during pre-training. For\nexample, in OpenAI GPT, the authors use a left-to-\nright architecture, where every token can only at-\ntend to previous tokens in the self-attention layers\nof the Transformer (Vaswani et al., 2017). Such re-\nstrictions are sub-optimal for sentence-level tasks,\nand could be very harmful when applying ﬁne-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 3,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "of the Transformer (Vaswani et al., 2017). Such re-\nstrictions are sub-optimal for sentence-level tasks,\nand could be very harmful when applying ﬁne-\ntuning based approaches to token-level tasks such\nas question answering, where it is crucial to incor-\nporate context from both directions.\nIn this paper, we improve the ﬁne-tuning based\napproaches by proposing BERT: Bidirectional\nEncoder Representations from Transformers.\nBERT alleviates the previously mentioned unidi-\nrectionality constraint by using a “masked lan-\nguage model” (MLM) pre-training objective, in-\nspired by the Cloze task (Taylor, 1953). The\nmasked language model randomly masks some of\nthe tokens from the input, and the objective is to\npredict the original vocabulary id of the maskedarXiv:1810.04805v2  [cs.CL]  24 May 2019\nword based only on its context. Unlike left-to-\nright language model pre-training, the MLM ob-\njective enables the representation to fuse the left\nand the right context, which allows us to pre-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 4,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "word based only on its context. Unlike left-to-\nright language model pre-training, the MLM ob-\njective enables the representation to fuse the left\nand the right context, which allows us to pre-\ntrain a deep bidirectional Transformer. In addi-\ntion to the masked language model, we also use\na “next sentence prediction” task that jointly pre-\ntrains text-pair representations. The contributions\nof our paper are as follows:\n• We demonstrate the importance of bidirectional\npre-training for language representations. Un-\nlike Radford et al. (2018), which uses unidirec-\ntional language models for pre-training, BERT\nuses masked language models to enable pre-\ntrained deep bidirectional representations. This\nis also in contrast to Peters et al. (2018a), which\nuses a shallow concatenation of independently\ntrained left-to-right and right-to-left LMs.\n• We show that pre-trained representations reduce\nthe need for many heavily-engineered task-\nspeciﬁc architectures. BERT is the ﬁrst ﬁne-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 5,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "trained left-to-right and right-to-left LMs.\n• We show that pre-trained representations reduce\nthe need for many heavily-engineered task-\nspeciﬁc architectures. BERT is the ﬁrst ﬁne-\ntuning based representation model that achieves\nstate-of-the-art performance on a large suite\nof sentence-level andtoken-level tasks, outper-\nforming many task-speciﬁc architectures.\n• BERT advances the state of the art for eleven\nNLP tasks. The code and pre-trained mod-\nels are available at https://github.com/\ngoogle-research/bert .\n2 Related Work\nThere is a long history of pre-training general lan-\nguage representations, and we brieﬂy review the\nmost widely-used approaches in this section.\n2.1 Unsupervised Feature-based Approaches\nLearning widely applicable representations of\nwords has been an active area of research for\ndecades, including non-neural (Brown et al., 1992;\nAndo and Zhang, 2005; Blitzer et al., 2006) and\nneural (Mikolov et al., 2013; Pennington et al.,",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 6,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "words has been an active area of research for\ndecades, including non-neural (Brown et al., 1992;\nAndo and Zhang, 2005; Blitzer et al., 2006) and\nneural (Mikolov et al., 2013; Pennington et al.,\n2014) methods. Pre-trained word embeddings\nare an integral part of modern NLP systems, of-\nfering signiﬁcant improvements over embeddings\nlearned from scratch (Turian et al., 2010). To pre-\ntrain word embedding vectors, left-to-right lan-\nguage modeling objectives have been used (Mnih\nand Hinton, 2009), as well as objectives to dis-\ncriminate correct from incorrect words in left and\nright context (Mikolov et al., 2013).These approaches have been generalized to\ncoarser granularities, such as sentence embed-\ndings (Kiros et al., 2015; Logeswaran and Lee,\n2018) or paragraph embeddings (Le and Mikolov,\n2014). To train sentence representations, prior\nwork has used objectives to rank candidate next\nsentences (Jernite et al., 2017; Logeswaran and\nLee, 2018), left-to-right generation of next sen-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 7,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "2014). To train sentence representations, prior\nwork has used objectives to rank candidate next\nsentences (Jernite et al., 2017; Logeswaran and\nLee, 2018), left-to-right generation of next sen-\ntence words given a representation of the previous\nsentence (Kiros et al., 2015), or denoising auto-\nencoder derived objectives (Hill et al., 2016).\nELMo and its predecessor (Peters et al., 2017,\n2018a) generalize traditional word embedding re-\nsearch along a different dimension. They extract\ncontext-sensitive features from a left-to-right and a\nright-to-left language model. The contextual rep-\nresentation of each token is the concatenation of\nthe left-to-right and right-to-left representations.\nWhen integrating contextual word embeddings\nwith existing task-speciﬁc architectures, ELMo\nadvances the state of the art for several major NLP\nbenchmarks (Peters et al., 2018a) including ques-\ntion answering (Rajpurkar et al., 2016), sentiment\nanalysis (Socher et al., 2013), and named entity",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 8,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "benchmarks (Peters et al., 2018a) including ques-\ntion answering (Rajpurkar et al., 2016), sentiment\nanalysis (Socher et al., 2013), and named entity\nrecognition (Tjong Kim Sang and De Meulder,\n2003). Melamud et al. (2016) proposed learning\ncontextual representations through a task to pre-\ndict a single word from both left and right context\nusing LSTMs. Similar to ELMo, their model is\nfeature-based and not deeply bidirectional. Fedus\net al. (2018) shows that the cloze task can be used\nto improve the robustness of text generation mod-\nels.\n2.2 Unsupervised Fine-tuning Approaches\nAs with the feature-based approaches, the ﬁrst\nworks in this direction only pre-trained word em-\nbedding parameters from unlabeled text (Col-\nlobert and Weston, 2008).\nMore recently, sentence or document encoders\nwhich produce contextual token representations\nhave been pre-trained from unlabeled text and\nﬁne-tuned for a supervised downstream task (Dai\nand Le, 2015; Howard and Ruder, 2018; Radford",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 9,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "which produce contextual token representations\nhave been pre-trained from unlabeled text and\nﬁne-tuned for a supervised downstream task (Dai\nand Le, 2015; Howard and Ruder, 2018; Radford\net al., 2018). The advantage of these approaches\nis that few parameters need to be learned from\nscratch. At least partly due to this advantage,\nOpenAI GPT (Radford et al., 2018) achieved pre-\nviously state-of-the-art results on many sentence-\nlevel tasks from the GLUE benchmark (Wang\net al., 2018a). Left-to-right language model-\nBERT BERT \nE[CLS] E1 E[SEP] ... ENE1’... EM’\nC\nT1\nT[SEP] ...\n TN\nT1’...\n TM’\n[CLS] Tok 1 [SEP] ... Tok NTok 1 ... TokM \nQuestion Paragraph Start/End Span \nBERT \nE[CLS] E1 E[SEP] ... ENE1’... EM’\nC\nT1\nT[SEP] ...\n TN\nT1’...\n TM’\n[CLS] Tok 1 [SEP] ... Tok NTok 1 ... TokM \nMasked Sentence A Masked Sentence B \nPre-training Fine-Tuning NSP Mask LM Mask LM \nUnlabeled Sentence A and B Pair SQuAD",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 10,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "C\nT1\nT[SEP] ...\n TN\nT1’...\n TM’\n[CLS] Tok 1 [SEP] ... Tok NTok 1 ... TokM \nMasked Sentence A Masked Sentence B \nPre-training Fine-Tuning NSP Mask LM Mask LM \nUnlabeled Sentence A and B Pair SQuAD \nQuestion Answer Pair NER MNLI Figure 1: Overall pre-training and ﬁne-tuning procedures for BERT. Apart from output layers, the same architec-\ntures are used in both pre-training and ﬁne-tuning. The same pre-trained model parameters are used to initialize\nmodels for different down-stream tasks. During ﬁne-tuning, all parameters are ﬁne-tuned. [CLS] is a special\nsymbol added in front of every input example, and [SEP] is a special separator token (e.g. separating ques-\ntions/answers).\ning and auto-encoder objectives have been used\nfor pre-training such models (Howard and Ruder,\n2018; Radford et al., 2018; Dai and Le, 2015).\n2.3 Transfer Learning from Supervised Data\nThere has also been work showing effective trans-\nfer from supervised tasks with large datasets, such",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 11,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "2018; Radford et al., 2018; Dai and Le, 2015).\n2.3 Transfer Learning from Supervised Data\nThere has also been work showing effective trans-\nfer from supervised tasks with large datasets, such\nas natural language inference (Conneau et al.,\n2017) and machine translation (McCann et al.,\n2017). Computer vision research has also demon-\nstrated the importance of transfer learning from\nlarge pre-trained models, where an effective recipe\nis to ﬁne-tune models pre-trained with Ima-\ngeNet (Deng et al., 2009; Yosinski et al., 2014).\n3 BERT\nWe introduce BERT and its detailed implementa-\ntion in this section. There are two steps in our\nframework: pre-training and ﬁne-tuning . Dur-\ning pre-training, the model is trained on unlabeled\ndata over different pre-training tasks. For ﬁne-\ntuning, the BERT model is ﬁrst initialized with\nthe pre-trained parameters, and all of the param-\neters are ﬁne-tuned using labeled data from the\ndownstream tasks. Each downstream task has sep-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 12,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "tuning, the BERT model is ﬁrst initialized with\nthe pre-trained parameters, and all of the param-\neters are ﬁne-tuned using labeled data from the\ndownstream tasks. Each downstream task has sep-\narate ﬁne-tuned models, even though they are ini-\ntialized with the same pre-trained parameters. The\nquestion-answering example in Figure 1 will serve\nas a running example for this section.\nA distinctive feature of BERT is its uniﬁed ar-\nchitecture across different tasks. There is mini-mal difference between the pre-trained architec-\nture and the ﬁnal downstream architecture.\nModel Architecture BERT’s model architec-\nture is a multi-layer bidirectional Transformer en-\ncoder based on the original implementation de-\nscribed in Vaswani et al. (2017) and released in\nthetensor2tensor library.1Because the use\nof Transformers has become common and our im-\nplementation is almost identical to the original,\nwe will omit an exhaustive background descrip-\ntion of the model architecture and refer readers to",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 13,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "of Transformers has become common and our im-\nplementation is almost identical to the original,\nwe will omit an exhaustive background descrip-\ntion of the model architecture and refer readers to\nVaswani et al. (2017) as well as excellent guides\nsuch as “The Annotated Transformer.”2\nIn this work, we denote the number of layers\n(i.e., Transformer blocks) as L, the hidden size as\nH, and the number of self-attention heads as A.3\nWe primarily report results on two model sizes:\nBERT BASE (L=12, H=768, A=12, Total Param-\neters=110M) and BERT LARGE (L=24, H=1024,\nA=16, Total Parameters=340M).\nBERT BASE was chosen to have the same model\nsize as OpenAI GPT for comparison purposes.\nCritically, however, the BERT Transformer uses\nbidirectional self-attention, while the GPT Trans-\nformer uses constrained self-attention where every\ntoken can only attend to context to its left.4\n1https://github.com/tensorﬂow/tensor2tensor\n2http://nlp.seas.harvard.edu/2018/04/03/attention.html",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 14,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "former uses constrained self-attention where every\ntoken can only attend to context to its left.4\n1https://github.com/tensorﬂow/tensor2tensor\n2http://nlp.seas.harvard.edu/2018/04/03/attention.html\n3In all cases we set the feed-forward/ﬁlter size to be 4H,\ni.e., 3072 for the H= 768 and 4096 for the H= 1024 .\n4We note that in the literature the bidirectional Trans-\nInput/Output Representations To make BERT\nhandle a variety of down-stream tasks, our input\nrepresentation is able to unambiguously represent\nboth a single sentence and a pair of sentences\n(e.g.,hQuestion, Answeri) in one token sequence.\nThroughout this work, a “sentence” can be an arbi-\ntrary span of contiguous text, rather than an actual\nlinguistic sentence. A “sequence” refers to the in-\nput token sequence to BERT, which may be a sin-\ngle sentence or two sentences packed together.\nWe use WordPiece embeddings (Wu et al.,\n2016) with a 30,000 token vocabulary. The ﬁrst\ntoken of every sequence is always a special clas-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 15,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "gle sentence or two sentences packed together.\nWe use WordPiece embeddings (Wu et al.,\n2016) with a 30,000 token vocabulary. The ﬁrst\ntoken of every sequence is always a special clas-\nsiﬁcation token ( [CLS] ). The ﬁnal hidden state\ncorresponding to this token is used as the ag-\ngregate sequence representation for classiﬁcation\ntasks. Sentence pairs are packed together into a\nsingle sequence. We differentiate the sentences in\ntwo ways. First, we separate them with a special\ntoken ( [SEP] ). Second, we add a learned embed-\nding to every token indicating whether it belongs\nto sentence Aor sentence B. As shown in Figure 1,\nwe denote input embedding as E, the ﬁnal hidden\nvector of the special [CLS] token asC2RH,\nand the ﬁnal hidden vector for the ithinput token\nasTi2RH.\nFor a given token, its input representation is\nconstructed by summing the corresponding token,\nsegment, and position embeddings. A visualiza-\ntion of this construction can be seen in Figure 2.\n3.1 Pre-training BERT",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 16,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "constructed by summing the corresponding token,\nsegment, and position embeddings. A visualiza-\ntion of this construction can be seen in Figure 2.\n3.1 Pre-training BERT\nUnlike Peters et al. (2018a) and Radford et al.\n(2018), we do not use traditional left-to-right or\nright-to-left language models to pre-train BERT.\nInstead, we pre-train BERT using two unsuper-\nvised tasks, described in this section. This step\nis presented in the left part of Figure 1.\nTask #1: Masked LM Intuitively, it is reason-\nable to believe that a deep bidirectional model is\nstrictly more powerful than either a left-to-right\nmodel or the shallow concatenation of a left-to-\nright and a right-to-left model. Unfortunately,\nstandard conditional language models can only be\ntrained left-to-right orright-to-left, since bidirec-\ntional conditioning would allow each word to in-\ndirectly “see itself”, and the model could trivially\npredict the target word in a multi-layered context.",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 17,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "tional conditioning would allow each word to in-\ndirectly “see itself”, and the model could trivially\npredict the target word in a multi-layered context.\nformer is often referred to as a “Transformer encoder” while\nthe left-context-only version is referred to as a “Transformer\ndecoder” since it can be used for text generation.In order to train a deep bidirectional representa-\ntion, we simply mask some percentage of the input\ntokens at random, and then predict those masked\ntokens. We refer to this procedure as a “masked\nLM” (MLM), although it is often referred to as a\nCloze task in the literature (Taylor, 1953). In this\ncase, the ﬁnal hidden vectors corresponding to the\nmask tokens are fed into an output softmax over\nthe vocabulary, as in a standard LM. In all of our\nexperiments, we mask 15% of all WordPiece to-\nkens in each sequence at random. In contrast to\ndenoising auto-encoders (Vincent et al., 2008), we\nonly predict the masked words rather than recon-\nstructing the entire input.",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 18,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "kens in each sequence at random. In contrast to\ndenoising auto-encoders (Vincent et al., 2008), we\nonly predict the masked words rather than recon-\nstructing the entire input.\nAlthough this allows us to obtain a bidirec-\ntional pre-trained model, a downside is that we\nare creating a mismatch between pre-training and\nﬁne-tuning, since the [MASK] token does not ap-\npear during ﬁne-tuning. To mitigate this, we do\nnot always replace “masked” words with the ac-\ntual[MASK] token. The training data generator\nchooses 15% of the token positions at random for\nprediction. If the i-th token is chosen, we replace\nthei-th token with (1) the [MASK] token 80% of\nthe time (2) a random token 10% of the time (3)\nthe unchanged i-th token 10% of the time. Then,\nTiwill be used to predict the original token with\ncross entropy loss. We compare variations of this\nprocedure in Appendix C.2.\nTask #2: Next Sentence Prediction (NSP)\nMany important downstream tasks such as Ques-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 19,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "cross entropy loss. We compare variations of this\nprocedure in Appendix C.2.\nTask #2: Next Sentence Prediction (NSP)\nMany important downstream tasks such as Ques-\ntion Answering (QA) and Natural Language Infer-\nence (NLI) are based on understanding the rela-\ntionship between two sentences, which is not di-\nrectly captured by language modeling. In order\nto train a model that understands sentence rela-\ntionships, we pre-train for a binarized next sen-\ntence prediction task that can be trivially gener-\nated from any monolingual corpus. Speciﬁcally,\nwhen choosing the sentences AandBfor each pre-\ntraining example, 50% of the time Bis the actual\nnext sentence that follows A(labeled as IsNext ),\nand 50% of the time it is a random sentence from\nthe corpus (labeled as NotNext ). As we show\nin Figure 1, Cis used for next sentence predic-\ntion (NSP).5Despite its simplicity, we demon-\nstrate in Section 5.1 that pre-training towards this\ntask is very beneﬁcial to both QA and NLI.6",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 20,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "in Figure 1, Cis used for next sentence predic-\ntion (NSP).5Despite its simplicity, we demon-\nstrate in Section 5.1 that pre-training towards this\ntask is very beneﬁcial to both QA and NLI.6\n5The ﬁnal model achieves 97%-98% accuracy on NSP.\n6The vector Cis not a meaningful sentence representation\nwithout ﬁne-tuning, since it was trained with NSP.\n[CLS] helikesplay## ing[SEP] mydogiscute[SEP]Input \nE[CLS] Ehe Elikes Eplay E## ing E[SEP] Emy Edog Eis Ecute E[SEP] Token \nEmbeddings \nEA EB EB EB EB EB EA EA EA EA EASegment \nEmbeddings \nE0 E6 E7 E8 E9 E10 E1 E2 E3 E4 E5Position \nEmbeddings Figure 2: BERT input representation. The input embeddings are the sum of the token embeddings, the segmenta-\ntion embeddings and the position embeddings.\nThe NSP task is closely related to representation-\nlearning objectives used in Jernite et al. (2017) and\nLogeswaran and Lee (2018). However, in prior\nwork, only sentence embeddings are transferred to\ndown-stream tasks, where BERT transfers all pa-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 21,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "learning objectives used in Jernite et al. (2017) and\nLogeswaran and Lee (2018). However, in prior\nwork, only sentence embeddings are transferred to\ndown-stream tasks, where BERT transfers all pa-\nrameters to initialize end-task model parameters.\nPre-training data The pre-training procedure\nlargely follows the existing literature on language\nmodel pre-training. For the pre-training corpus we\nuse the BooksCorpus (800M words) (Zhu et al.,\n2015) and English Wikipedia (2,500M words).\nFor Wikipedia we extract only the text passages\nand ignore lists, tables, and headers. It is criti-\ncal to use a document-level corpus rather than a\nshufﬂed sentence-level corpus such as the Billion\nWord Benchmark (Chelba et al., 2013) in order to\nextract long contiguous sequences.\n3.2 Fine-tuning BERT\nFine-tuning is straightforward since the self-\nattention mechanism in the Transformer al-\nlows BERT to model many downstream tasks—\nwhether they involve single text or text pairs—by",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 22,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "Fine-tuning is straightforward since the self-\nattention mechanism in the Transformer al-\nlows BERT to model many downstream tasks—\nwhether they involve single text or text pairs—by\nswapping out the appropriate inputs and outputs.\nFor applications involving text pairs, a common\npattern is to independently encode text pairs be-\nfore applying bidirectional cross attention, such\nas Parikh et al. (2016); Seo et al. (2017). BERT\ninstead uses the self-attention mechanism to unify\nthese two stages, as encoding a concatenated text\npair with self-attention effectively includes bidi-\nrectional cross attention between two sentences.\nFor each task, we simply plug in the task-\nspeciﬁc inputs and outputs into BERT and ﬁne-\ntune all the parameters end-to-end. At the in-\nput, sentence Aand sentence Bfrom pre-training\nare analogous to (1) sentence pairs in paraphras-\ning, (2) hypothesis-premise pairs in entailment, (3)",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 23,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "tune all the parameters end-to-end. At the in-\nput, sentence Aand sentence Bfrom pre-training\nare analogous to (1) sentence pairs in paraphras-\ning, (2) hypothesis-premise pairs in entailment, (3)\nquestion-passage pairs in question answering, and(4) a degenerate text- ?pair in text classiﬁcation\nor sequence tagging. At the output, the token rep-\nresentations are fed into an output layer for token-\nlevel tasks, such as sequence tagging or question\nanswering, and the [CLS] representation is fed\ninto an output layer for classiﬁcation, such as en-\ntailment or sentiment analysis.\nCompared to pre-training, ﬁne-tuning is rela-\ntively inexpensive. All of the results in the pa-\nper can be replicated in at most 1 hour on a sin-\ngle Cloud TPU, or a few hours on a GPU, starting\nfrom the exact same pre-trained model.7We de-\nscribe the task-speciﬁc details in the correspond-\ning subsections of Section 4. More details can be\nfound in Appendix A.5.\n4 Experiments",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 24,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "from the exact same pre-trained model.7We de-\nscribe the task-speciﬁc details in the correspond-\ning subsections of Section 4. More details can be\nfound in Appendix A.5.\n4 Experiments\nIn this section, we present BERT ﬁne-tuning re-\nsults on 11 NLP tasks.\n4.1 GLUE\nThe General Language Understanding Evaluation\n(GLUE) benchmark (Wang et al., 2018a) is a col-\nlection of diverse natural language understanding\ntasks. Detailed descriptions of GLUE datasets are\nincluded in Appendix B.1.\nTo ﬁne-tune on GLUE, we represent the input\nsequence (for single sentence or sentence pairs)\nas described in Section 3, and use the ﬁnal hid-\nden vectorC2RHcorresponding to the ﬁrst\ninput token ( [CLS] ) as the aggregate representa-\ntion. The only new parameters introduced during\nﬁne-tuning are classiﬁcation layer weights W2\nRK\u0002H, whereKis the number of labels. We com-\npute a standard classiﬁcation loss with CandW,\ni.e.,log(softmax( CWT)).\n7For example, the BERT SQuAD model can be trained in",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 25,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "RK\u0002H, whereKis the number of labels. We com-\npute a standard classiﬁcation loss with CandW,\ni.e.,log(softmax( CWT)).\n7For example, the BERT SQuAD model can be trained in\naround 30 minutes on a single Cloud TPU to achieve a Dev\nF1 score of 91.0%.\n8See (10) in https://gluebenchmark.com/faq .\nSystem MNLI-(m/mm) QQP QNLI SST-2 CoLA STS-B MRPC RTE Average\n392k 363k 108k 67k 8.5k 5.7k 3.5k 2.5k -\nPre-OpenAI SOTA 80.6/80.1 66.1 82.3 93.2 35.0 81.0 86.0 61.7 74.0\nBiLSTM+ELMo+Attn 76.4/76.1 64.8 79.8 90.4 36.0 73.3 84.9 56.8 71.0\nOpenAI GPT 82.1/81.4 70.3 87.4 91.3 45.4 80.0 82.3 56.0 75.1\nBERT BASE 84.6/83.4 71.2 90.5 93.5 52.1 85.8 88.9 66.4 79.6\nBERT LARGE 86.7/85.9 72.1 92.7 94.9 60.5 86.5 89.3 70.1 82.1\nTable 1: GLUE Test results, scored by the evaluation server ( https://gluebenchmark.com/leaderboard ).\nThe number below each task denotes the number of training examples. The “Average” column is slightly different",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 26,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "The number below each task denotes the number of training examples. The “Average” column is slightly different\nthan the ofﬁcial GLUE score, since we exclude the problematic WNLI set.8BERT and OpenAI GPT are single-\nmodel, single task. F1 scores are reported for QQP and MRPC, Spearman correlations are reported for STS-B, and\naccuracy scores are reported for the other tasks. We exclude entries that use BERT as one of their components.\nWe use a batch size of 32 and ﬁne-tune for 3\nepochs over the data for all GLUE tasks. For each\ntask, we selected the best ﬁne-tuning learning rate\n(among 5e-5, 4e-5, 3e-5, and 2e-5) on the Dev set.\nAdditionally, for BERT LARGE we found that ﬁne-\ntuning was sometimes unstable on small datasets,\nso we ran several random restarts and selected the\nbest model on the Dev set. With random restarts,\nwe use the same pre-trained checkpoint but per-\nform different ﬁne-tuning data shufﬂing and clas-\nsiﬁer layer initialization.9\nResults are presented in Table 1. Both",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 27,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "we use the same pre-trained checkpoint but per-\nform different ﬁne-tuning data shufﬂing and clas-\nsiﬁer layer initialization.9\nResults are presented in Table 1. Both\nBERT BASE and BERT LARGE outperform all sys-\ntems on all tasks by a substantial margin, obtaining\n4.5% and 7.0% respective average accuracy im-\nprovement over the prior state of the art. Note that\nBERT BASE and OpenAI GPT are nearly identical\nin terms of model architecture apart from the at-\ntention masking. For the largest and most widely\nreported GLUE task, MNLI, BERT obtains a 4.6%\nabsolute accuracy improvement. On the ofﬁcial\nGLUE leaderboard10, BERT LARGE obtains a score\nof 80.5, compared to OpenAI GPT, which obtains\n72.8 as of the date of writing.\nWe ﬁnd that BERT LARGE signiﬁcantly outper-\nforms BERT BASE across all tasks, especially those\nwith very little training data. The effect of model\nsize is explored more thoroughly in Section 5.2.\n4.2 SQuAD v1.1\nThe Stanford Question Answering Dataset",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 28,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "with very little training data. The effect of model\nsize is explored more thoroughly in Section 5.2.\n4.2 SQuAD v1.1\nThe Stanford Question Answering Dataset\n(SQuAD v1.1) is a collection of 100k crowd-\nsourced question/answer pairs (Rajpurkar et al.,\n2016). Given a question and a passage from\n9The GLUE data set distribution does not include the Test\nlabels, and we only made a single GLUE evaluation server\nsubmission for each of BERT BASE and BERT LARGE .\n10https://gluebenchmark.com/leaderboardWikipedia containing the answer, the task is to\npredict the answer text span in the passage.\nAs shown in Figure 1, in the question answer-\ning task, we represent the input question and pas-\nsage as a single packed sequence, with the ques-\ntion using the Aembedding and the passage using\ntheBembedding. We only introduce a start vec-\ntorS2RHand an end vector E2RHduring\nﬁne-tuning. The probability of word ibeing the\nstart of the answer span is computed as a dot prod-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 29,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "theBembedding. We only introduce a start vec-\ntorS2RHand an end vector E2RHduring\nﬁne-tuning. The probability of word ibeing the\nstart of the answer span is computed as a dot prod-\nuct between TiandSfollowed by a softmax over\nall of the words in the paragraph: Pi=eS\u0001TiP\njeS\u0001Tj.\nThe analogous formula is used for the end of the\nanswer span. The score of a candidate span from\npositionito positionjis deﬁned as S\u0001Ti+E\u0001Tj,\nand the maximum scoring span where j\u0015iis\nused as a prediction. The training objective is the\nsum of the log-likelihoods of the correct start and\nend positions. We ﬁne-tune for 3 epochs with a\nlearning rate of 5e-5 and a batch size of 32.\nTable 2 shows top leaderboard entries as well\nas results from top published systems (Seo et al.,\n2017; Clark and Gardner, 2018; Peters et al.,\n2018a; Hu et al., 2018). The top results from the\nSQuAD leaderboard do not have up-to-date public\nsystem descriptions available,11and are allowed to\nuse any public data when training their systems.",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 30,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "2018a; Hu et al., 2018). The top results from the\nSQuAD leaderboard do not have up-to-date public\nsystem descriptions available,11and are allowed to\nuse any public data when training their systems.\nWe therefore use modest data augmentation in\nour system by ﬁrst ﬁne-tuning on TriviaQA (Joshi\net al., 2017) befor ﬁne-tuning on SQuAD.\nOur best performing system outperforms the top\nleaderboard system by +1.5 F1 in ensembling and\n+1.3 F1 as a single system. In fact, our single\nBERT model outperforms the top ensemble sys-\ntem in terms of F1 score. Without TriviaQA ﬁne-\n11QANet is described in Yu et al. (2018), but the system\nhas improved substantially after publication.\nSystem Dev Test\nEM F1 EM F1\nTop Leaderboard Systems (Dec 10th, 2018)\nHuman - - 82.3 91.2\n#1 Ensemble - nlnet - - 86.0 91.7\n#2 Ensemble - QANet - - 84.5 90.5\nPublished\nBiDAF+ELMo (Single) - 85.6 - 85.8\nR.M. Reader (Ensemble) 81.2 87.9 82.3 88.5\nOurs\nBERT BASE (Single) 80.8 88.5 - -\nBERT LARGE (Single) 84.1 90.9 - -",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 31,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "#2 Ensemble - QANet - - 84.5 90.5\nPublished\nBiDAF+ELMo (Single) - 85.6 - 85.8\nR.M. Reader (Ensemble) 81.2 87.9 82.3 88.5\nOurs\nBERT BASE (Single) 80.8 88.5 - -\nBERT LARGE (Single) 84.1 90.9 - -\nBERT LARGE (Ensemble) 85.8 91.8 - -\nBERT LARGE (Sgl.+TriviaQA) 84.2 91.1 85.1 91.8\nBERT LARGE (Ens.+TriviaQA) 86.2 92.2 87.4 93.2\nTable 2: SQuAD 1.1 results. The BERT ensemble\nis 7x systems which use different pre-training check-\npoints and ﬁne-tuning seeds.\nSystem Dev Test\nEM F1 EM F1\nTop Leaderboard Systems (Dec 10th, 2018)\nHuman 86.3 89.0 86.9 89.5\n#1 Single - MIR-MRC (F-Net) - - 74.8 78.0\n#2 Single - nlnet - - 74.2 77.1\nPublished\nunet (Ensemble) - - 71.4 74.9\nSLQA+ (Single) - 71.4 74.4\nOurs\nBERT LARGE (Single) 78.7 81.9 80.0 83.1\nTable 3: SQuAD 2.0 results. We exclude entries that\nuse BERT as one of their components.\ntuning data, we only lose 0.1-0.4 F1, still outper-\nforming all existing systems by a wide margin.12\n4.3 SQuAD v2.0\nThe SQuAD 2.0 task extends the SQuAD 1.1",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 32,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "use BERT as one of their components.\ntuning data, we only lose 0.1-0.4 F1, still outper-\nforming all existing systems by a wide margin.12\n4.3 SQuAD v2.0\nThe SQuAD 2.0 task extends the SQuAD 1.1\nproblem deﬁnition by allowing for the possibility\nthat no short answer exists in the provided para-\ngraph, making the problem more realistic.\nWe use a simple approach to extend the SQuAD\nv1.1 BERT model for this task. We treat ques-\ntions that do not have an answer as having an an-\nswer span with start and end at the [CLS] to-\nken. The probability space for the start and end\nanswer span positions is extended to include the\nposition of the [CLS] token. For prediction, we\ncompare the score of the no-answer span: snull=\nS\u0001C+E\u0001Cto the score of the best non-null span\n12The TriviaQA data we used consists of paragraphs from\nTriviaQA-Wiki formed of the ﬁrst 400 tokens in documents,\nthat contain at least one of the provided possible answers.System Dev Test\nESIM+GloVe 51.9 52.7\nESIM+ELMo 59.1 59.2",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 33,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "TriviaQA-Wiki formed of the ﬁrst 400 tokens in documents,\nthat contain at least one of the provided possible answers.System Dev Test\nESIM+GloVe 51.9 52.7\nESIM+ELMo 59.1 59.2\nOpenAI GPT - 78.0\nBERT BASE 81.6 -\nBERT LARGE 86.6 86.3\nHuman (expert)y- 85.0\nHuman (5 annotations)y- 88.0\nTable 4: SWAG Dev and Test accuracies.yHuman per-\nformance is measured with 100 samples, as reported in\nthe SWAG paper.\n^si;j=maxj\u0015iS\u0001Ti+E\u0001Tj. We predict a non-null\nanswer when ^si;j> s null+\u001c, where the thresh-\nold\u001cis selected on the dev set to maximize F1.\nWe did not use TriviaQA data for this model. We\nﬁne-tuned for 2 epochs with a learning rate of 5e-5\nand a batch size of 48.\nThe results compared to prior leaderboard en-\ntries and top published work (Sun et al., 2018;\nWang et al., 2018b) are shown in Table 3, exclud-\ning systems that use BERT as one of their com-\nponents. We observe a +5.1 F1 improvement over\nthe previous best system.\n4.4 SWAG\nThe Situations With Adversarial Generations",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 34,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "ing systems that use BERT as one of their com-\nponents. We observe a +5.1 F1 improvement over\nthe previous best system.\n4.4 SWAG\nThe Situations With Adversarial Generations\n(SWAG) dataset contains 113k sentence-pair com-\npletion examples that evaluate grounded common-\nsense inference (Zellers et al., 2018). Given a sen-\ntence, the task is to choose the most plausible con-\ntinuation among four choices.\nWhen ﬁne-tuning on the SWAG dataset, we\nconstruct four input sequences, each containing\nthe concatenation of the given sentence (sentence\nA) and a possible continuation (sentence B). The\nonly task-speciﬁc parameters introduced is a vec-\ntor whose dot product with the [CLS] token rep-\nresentation Cdenotes a score for each choice\nwhich is normalized with a softmax layer.\nWe ﬁne-tune the model for 3 epochs with a\nlearning rate of 2e-5 and a batch size of 16. Re-\nsults are presented in Table 4. BERT LARGE out-\nperforms the authors’ baseline ESIM+ELMo sys-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 35,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "We ﬁne-tune the model for 3 epochs with a\nlearning rate of 2e-5 and a batch size of 16. Re-\nsults are presented in Table 4. BERT LARGE out-\nperforms the authors’ baseline ESIM+ELMo sys-\ntem by +27.1% and OpenAI GPT by 8.3%.\n5 Ablation Studies\nIn this section, we perform ablation experiments\nover a number of facets of BERT in order to better\nunderstand their relative importance. Additional\nDev Set\nTasks MNLI-m QNLI MRPC SST-2 SQuAD\n(Acc) (Acc) (Acc) (Acc) (F1)\nBERT BASE 84.4 88.4 86.7 92.7 88.5\nNo NSP 83.9 84.9 86.5 92.6 87.9\nLTR & No NSP 82.1 84.3 77.5 92.1 77.8\n+ BiLSTM 82.1 84.1 75.7 91.6 84.9\nTable 5: Ablation over the pre-training tasks using the\nBERT BASE architecture. “No NSP” is trained without\nthe next sentence prediction task. “LTR & No NSP” is\ntrained as a left-to-right LM without the next sentence\nprediction, like OpenAI GPT. “+ BiLSTM” adds a ran-\ndomly initialized BiLSTM on top of the “LTR + No\nNSP” model during ﬁne-tuning.\nablation studies can be found in Appendix C.",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 36,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "prediction, like OpenAI GPT. “+ BiLSTM” adds a ran-\ndomly initialized BiLSTM on top of the “LTR + No\nNSP” model during ﬁne-tuning.\nablation studies can be found in Appendix C.\n5.1 Effect of Pre-training Tasks\nWe demonstrate the importance of the deep bidi-\nrectionality of BERT by evaluating two pre-\ntraining objectives using exactly the same pre-\ntraining data, ﬁne-tuning scheme, and hyperpa-\nrameters as BERT BASE :\nNo NSP : A bidirectional model which is trained\nusing the “masked LM” (MLM) but without the\n“next sentence prediction” (NSP) task.\nLTR & No NSP : A left-context-only model which\nis trained using a standard Left-to-Right (LTR)\nLM, rather than an MLM. The left-only constraint\nwas also applied at ﬁne-tuning, because removing\nit introduced a pre-train/ﬁne-tune mismatch that\ndegraded downstream performance. Additionally,\nthis model was pre-trained without the NSP task.\nThis is directly comparable to OpenAI GPT, but\nusing our larger training dataset, our input repre-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 37,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "degraded downstream performance. Additionally,\nthis model was pre-trained without the NSP task.\nThis is directly comparable to OpenAI GPT, but\nusing our larger training dataset, our input repre-\nsentation, and our ﬁne-tuning scheme.\nWe ﬁrst examine the impact brought by the NSP\ntask. In Table 5, we show that removing NSP\nhurts performance signiﬁcantly on QNLI, MNLI,\nand SQuAD 1.1. Next, we evaluate the impact\nof training bidirectional representations by com-\nparing “No NSP” to “LTR & No NSP”. The LTR\nmodel performs worse than the MLM model on all\ntasks, with large drops on MRPC and SQuAD.\nFor SQuAD it is intuitively clear that a LTR\nmodel will perform poorly at token predictions,\nsince the token-level hidden states have no right-\nside context. In order to make a good faith at-\ntempt at strengthening the LTR system, we added\na randomly initialized BiLSTM on top. This does\nsigniﬁcantly improve results on SQuAD, but theresults are still far worse than those of the pre-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 38,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "tempt at strengthening the LTR system, we added\na randomly initialized BiLSTM on top. This does\nsigniﬁcantly improve results on SQuAD, but theresults are still far worse than those of the pre-\ntrained bidirectional models. The BiLSTM hurts\nperformance on the GLUE tasks.\nWe recognize that it would also be possible to\ntrain separate LTR and RTL models and represent\neach token as the concatenation of the two mod-\nels, as ELMo does. However: (a) this is twice as\nexpensive as a single bidirectional model; (b) this\nis non-intuitive for tasks like QA, since the RTL\nmodel would not be able to condition the answer\non the question; (c) this it is strictly less powerful\nthan a deep bidirectional model, since it can use\nboth left and right context at every layer.\n5.2 Effect of Model Size\nIn this section, we explore the effect of model size\non ﬁne-tuning task accuracy. We trained a number\nof BERT models with a differing number of layers,\nhidden units, and attention heads, while otherwise",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 39,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "on ﬁne-tuning task accuracy. We trained a number\nof BERT models with a differing number of layers,\nhidden units, and attention heads, while otherwise\nusing the same hyperparameters and training pro-\ncedure as described previously.\nResults on selected GLUE tasks are shown in\nTable 6. In this table, we report the average Dev\nSet accuracy from 5 random restarts of ﬁne-tuning.\nWe can see that larger models lead to a strict ac-\ncuracy improvement across all four datasets, even\nfor MRPC which only has 3,600 labeled train-\ning examples, and is substantially different from\nthe pre-training tasks. It is also perhaps surpris-\ning that we are able to achieve such signiﬁcant\nimprovements on top of models which are al-\nready quite large relative to the existing literature.\nFor example, the largest Transformer explored in\nVaswani et al. (2017) is (L=6, H=1024, A=16)\nwith 100M parameters for the encoder, and the\nlargest Transformer we have found in the literature",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 40,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "For example, the largest Transformer explored in\nVaswani et al. (2017) is (L=6, H=1024, A=16)\nwith 100M parameters for the encoder, and the\nlargest Transformer we have found in the literature\nis (L=64, H=512, A=2) with 235M parameters\n(Al-Rfou et al., 2018). By contrast, BERT BASE\ncontains 110M parameters and BERT LARGE con-\ntains 340M parameters.\nIt has long been known that increasing the\nmodel size will lead to continual improvements\non large-scale tasks such as machine translation\nand language modeling, which is demonstrated\nby the LM perplexity of held-out training data\nshown in Table 6. However, we believe that\nthis is the ﬁrst work to demonstrate convinc-\ningly that scaling to extreme model sizes also\nleads to large improvements on very small scale\ntasks, provided that the model has been sufﬁ-\nciently pre-trained. Peters et al. (2018b) presented\nmixed results on the downstream task impact of\nincreasing the pre-trained bi-LM size from two",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 41,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "tasks, provided that the model has been sufﬁ-\nciently pre-trained. Peters et al. (2018b) presented\nmixed results on the downstream task impact of\nincreasing the pre-trained bi-LM size from two\nto four layers and Melamud et al. (2016) men-\ntioned in passing that increasing hidden dimen-\nsion size from 200 to 600 helped, but increasing\nfurther to 1,000 did not bring further improve-\nments. Both of these prior works used a feature-\nbased approach — we hypothesize that when the\nmodel is ﬁne-tuned directly on the downstream\ntasks and uses only a very small number of ran-\ndomly initialized additional parameters, the task-\nspeciﬁc models can beneﬁt from the larger, more\nexpressive pre-trained representations even when\ndownstream task data is very small.\n5.3 Feature-based Approach with BERT\nAll of the BERT results presented so far have used\nthe ﬁne-tuning approach, where a simple classiﬁ-\ncation layer is added to the pre-trained model, and\nall parameters are jointly ﬁne-tuned on a down-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 42,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "All of the BERT results presented so far have used\nthe ﬁne-tuning approach, where a simple classiﬁ-\ncation layer is added to the pre-trained model, and\nall parameters are jointly ﬁne-tuned on a down-\nstream task. However, the feature-based approach,\nwhere ﬁxed features are extracted from the pre-\ntrained model, has certain advantages. First, not\nall tasks can be easily represented by a Trans-\nformer encoder architecture, and therefore require\na task-speciﬁc model architecture to be added.\nSecond, there are major computational beneﬁts\nto pre-compute an expensive representation of the\ntraining data once and then run many experiments\nwith cheaper models on top of this representation.\nIn this section, we compare the two approaches\nby applying BERT to the CoNLL-2003 Named\nEntity Recognition (NER) task (Tjong Kim Sang\nand De Meulder, 2003). In the input to BERT, we\nuse a case-preserving WordPiece model, and we\ninclude the maximal document context provided",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 43,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "Entity Recognition (NER) task (Tjong Kim Sang\nand De Meulder, 2003). In the input to BERT, we\nuse a case-preserving WordPiece model, and we\ninclude the maximal document context provided\nby the data. Following standard practice, we for-\nmulate this as a tagging task but do not use a CRF\nHyperparams Dev Set Accuracy\n#L #H #A LM (ppl) MNLI-m MRPC SST-2\n3 768 12 5.84 77.9 79.8 88.4\n6 768 3 5.24 80.6 82.2 90.7\n6 768 12 4.68 81.9 84.8 91.3\n12 768 12 3.99 84.4 86.7 92.9\n12 1024 16 3.54 85.7 86.9 93.3\n24 1024 16 3.23 86.6 87.8 93.7\nTable 6: Ablation over BERT model size. #L = the\nnumber of layers; #H = hidden size; #A = number of at-\ntention heads. “LM (ppl)” is the masked LM perplexity\nof held-out training data.System Dev F1 Test F1\nELMo (Peters et al., 2018a) 95.7 92.2\nCVT (Clark et al., 2018) - 92.6\nCSE (Akbik et al., 2018) - 93.1\nFine-tuning approach\nBERT LARGE 96.6 92.8\nBERT BASE 96.4 92.4\nFeature-based approach (BERT BASE)\nEmbeddings 91.0 -\nSecond-to-Last Hidden 95.6 -",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 44,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "CSE (Akbik et al., 2018) - 93.1\nFine-tuning approach\nBERT LARGE 96.6 92.8\nBERT BASE 96.4 92.4\nFeature-based approach (BERT BASE)\nEmbeddings 91.0 -\nSecond-to-Last Hidden 95.6 -\nLast Hidden 94.9 -\nWeighted Sum Last Four Hidden 95.9 -\nConcat Last Four Hidden 96.1 -\nWeighted Sum All 12 Layers 95.5 -\nTable 7: CoNLL-2003 Named Entity Recognition re-\nsults. Hyperparameters were selected using the Dev\nset. The reported Dev and Test scores are averaged over\n5 random restarts using those hyperparameters.\nlayer in the output. We use the representation of\nthe ﬁrst sub-token as the input to the token-level\nclassiﬁer over the NER label set.\nTo ablate the ﬁne-tuning approach, we apply the\nfeature-based approach by extracting the activa-\ntions from one or more layers without ﬁne-tuning\nany parameters of BERT. These contextual em-\nbeddings are used as input to a randomly initial-\nized two-layer 768-dimensional BiLSTM before\nthe classiﬁcation layer.\nResults are presented in Table 7. BERT LARGE",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 45,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "beddings are used as input to a randomly initial-\nized two-layer 768-dimensional BiLSTM before\nthe classiﬁcation layer.\nResults are presented in Table 7. BERT LARGE\nperforms competitively with state-of-the-art meth-\nods. The best performing method concatenates the\ntoken representations from the top four hidden lay-\ners of the pre-trained Transformer, which is only\n0.3 F1 behind ﬁne-tuning the entire model. This\ndemonstrates that BERT is effective for both ﬁne-\ntuning and feature-based approaches.\n6 Conclusion\nRecent empirical improvements due to transfer\nlearning with language models have demonstrated\nthat rich, unsupervised pre-training is an integral\npart of many language understanding systems. In\nparticular, these results enable even low-resource\ntasks to beneﬁt from deep unidirectional architec-\ntures. Our major contribution is further general-\nizing these ﬁndings to deep bidirectional architec-\ntures, allowing the same pre-trained model to suc-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 46,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "tures. Our major contribution is further general-\nizing these ﬁndings to deep bidirectional architec-\ntures, allowing the same pre-trained model to suc-\ncessfully tackle a broad set of NLP tasks.\nReferences\nAlan Akbik, Duncan Blythe, and Roland V ollgraf.\n2018. Contextual string embeddings for sequence\nlabeling. In Proceedings of the 27th International\nConference on Computational Linguistics , pages\n1638–1649.\nRami Al-Rfou, Dokook Choe, Noah Constant, Mandy\nGuo, and Llion Jones. 2018. Character-level lan-\nguage modeling with deeper self-attention. arXiv\npreprint arXiv:1808.04444 .\nRie Kubota Ando and Tong Zhang. 2005. A framework\nfor learning predictive structures from multiple tasks\nand unlabeled data. Journal of Machine Learning\nResearch , 6(Nov):1817–1853.\nLuisa Bentivogli, Bernardo Magnini, Ido Dagan,\nHoa Trang Dang, and Danilo Giampiccolo. 2009.\nThe ﬁfth PASCAL recognizing textual entailment\nchallenge. In TAC. NIST.\nJohn Blitzer, Ryan McDonald, and Fernando Pereira.",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 47,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "Hoa Trang Dang, and Danilo Giampiccolo. 2009.\nThe ﬁfth PASCAL recognizing textual entailment\nchallenge. In TAC. NIST.\nJohn Blitzer, Ryan McDonald, and Fernando Pereira.\n2006. Domain adaptation with structural correspon-\ndence learning. In Proceedings of the 2006 confer-\nence on empirical methods in natural language pro-\ncessing , pages 120–128. Association for Computa-\ntional Linguistics.\nSamuel R. Bowman, Gabor Angeli, Christopher Potts,\nand Christopher D. Manning. 2015. A large anno-\ntated corpus for learning natural language inference.\nInEMNLP . Association for Computational Linguis-\ntics.\nPeter F Brown, Peter V Desouza, Robert L Mercer,\nVincent J Della Pietra, and Jenifer C Lai. 1992.\nClass-based n-gram models of natural language.\nComputational linguistics , 18(4):467–479.\nDaniel Cer, Mona Diab, Eneko Agirre, Inigo Lopez-\nGazpio, and Lucia Specia. 2017. Semeval-2017\ntask 1: Semantic textual similarity multilingual and\ncrosslingual focused evaluation. In Proceedings",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 48,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "Daniel Cer, Mona Diab, Eneko Agirre, Inigo Lopez-\nGazpio, and Lucia Specia. 2017. Semeval-2017\ntask 1: Semantic textual similarity multilingual and\ncrosslingual focused evaluation. In Proceedings\nof the 11th International Workshop on Semantic\nEvaluation (SemEval-2017) , pages 1–14, Vancou-\nver, Canada. Association for Computational Lin-\nguistics.\nCiprian Chelba, Tomas Mikolov, Mike Schuster, Qi Ge,\nThorsten Brants, Phillipp Koehn, and Tony Robin-\nson. 2013. One billion word benchmark for measur-\ning progress in statistical language modeling. arXiv\npreprint arXiv:1312.3005 .\nZ. Chen, H. Zhang, X. Zhang, and L. Zhao. 2018.\nQuora question pairs.\nChristopher Clark and Matt Gardner. 2018. Simple\nand effective multi-paragraph reading comprehen-\nsion. In ACL.Kevin Clark, Minh-Thang Luong, Christopher D Man-\nning, and Quoc Le. 2018. Semi-supervised se-\nquence modeling with cross-view training. In Pro-\nceedings of the 2018 Conference on Empirical Meth-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 49,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "ning, and Quoc Le. 2018. Semi-supervised se-\nquence modeling with cross-view training. In Pro-\nceedings of the 2018 Conference on Empirical Meth-\nods in Natural Language Processing , pages 1914–\n1925.\nRonan Collobert and Jason Weston. 2008. A uniﬁed\narchitecture for natural language processing: Deep\nneural networks with multitask learning. In Pro-\nceedings of the 25th international conference on\nMachine learning , pages 160–167. ACM.\nAlexis Conneau, Douwe Kiela, Holger Schwenk, Lo ¨ıc\nBarrault, and Antoine Bordes. 2017. Supervised\nlearning of universal sentence representations from\nnatural language inference data. In Proceedings of\nthe 2017 Conference on Empirical Methods in Nat-\nural Language Processing , pages 670–680, Copen-\nhagen, Denmark. Association for Computational\nLinguistics.\nAndrew M Dai and Quoc V Le. 2015. Semi-supervised\nsequence learning. In Advances in neural informa-\ntion processing systems , pages 3079–3087.\nJ. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 50,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "sequence learning. In Advances in neural informa-\ntion processing systems , pages 3079–3087.\nJ. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-\nFei. 2009. ImageNet: A Large-Scale Hierarchical\nImage Database. In CVPR09 .\nWilliam B Dolan and Chris Brockett. 2005. Automati-\ncally constructing a corpus of sentential paraphrases.\nInProceedings of the Third International Workshop\non Paraphrasing (IWP2005) .\nWilliam Fedus, Ian Goodfellow, and Andrew M Dai.\n2018. Maskgan: Better text generation via ﬁlling in\nthe.arXiv preprint arXiv:1801.07736 .\nDan Hendrycks and Kevin Gimpel. 2016. Bridging\nnonlinearities and stochastic regularizers with gaus-\nsian error linear units. CoRR , abs/1606.08415.\nFelix Hill, Kyunghyun Cho, and Anna Korhonen. 2016.\nLearning distributed representations of sentences\nfrom unlabelled data. In Proceedings of the 2016\nConference of the North American Chapter of the\nAssociation for Computational Linguistics: Human\nLanguage Technologies . Association for Computa-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 51,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "from unlabelled data. In Proceedings of the 2016\nConference of the North American Chapter of the\nAssociation for Computational Linguistics: Human\nLanguage Technologies . Association for Computa-\ntional Linguistics.\nJeremy Howard and Sebastian Ruder. 2018. Universal\nlanguage model ﬁne-tuning for text classiﬁcation. In\nACL. Association for Computational Linguistics.\nMinghao Hu, Yuxing Peng, Zhen Huang, Xipeng Qiu,\nFuru Wei, and Ming Zhou. 2018. Reinforced\nmnemonic reader for machine reading comprehen-\nsion. In IJCAI .\nYacine Jernite, Samuel R. Bowman, and David Son-\ntag. 2017. Discourse-based objectives for fast un-\nsupervised sentence representation learning. CoRR ,\nabs/1705.00557.\nMandar Joshi, Eunsol Choi, Daniel S Weld, and Luke\nZettlemoyer. 2017. Triviaqa: A large scale distantly\nsupervised challenge dataset for reading comprehen-\nsion. In ACL.\nRyan Kiros, Yukun Zhu, Ruslan R Salakhutdinov,\nRichard Zemel, Raquel Urtasun, Antonio Torralba,",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 52,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "supervised challenge dataset for reading comprehen-\nsion. In ACL.\nRyan Kiros, Yukun Zhu, Ruslan R Salakhutdinov,\nRichard Zemel, Raquel Urtasun, Antonio Torralba,\nand Sanja Fidler. 2015. Skip-thought vectors. In\nAdvances in neural information processing systems ,\npages 3294–3302.\nQuoc Le and Tomas Mikolov. 2014. Distributed rep-\nresentations of sentences and documents. In Inter-\nnational Conference on Machine Learning , pages\n1188–1196.\nHector J Levesque, Ernest Davis, and Leora Morgen-\nstern. 2011. The winograd schema challenge. In\nAaai spring symposium: Logical formalizations of\ncommonsense reasoning , volume 46, page 47.\nLajanugen Logeswaran and Honglak Lee. 2018. An\nefﬁcient framework for learning sentence represen-\ntations. In International Conference on Learning\nRepresentations .\nBryan McCann, James Bradbury, Caiming Xiong, and\nRichard Socher. 2017. Learned in translation: Con-\ntextualized word vectors. In NIPS .\nOren Melamud, Jacob Goldberger, and Ido Dagan.",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 53,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "Bryan McCann, James Bradbury, Caiming Xiong, and\nRichard Socher. 2017. Learned in translation: Con-\ntextualized word vectors. In NIPS .\nOren Melamud, Jacob Goldberger, and Ido Dagan.\n2016. context2vec: Learning generic context em-\nbedding with bidirectional LSTM. In CoNLL .\nTomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-\nrado, and Jeff Dean. 2013. Distributed representa-\ntions of words and phrases and their compositional-\nity. In Advances in Neural Information Processing\nSystems 26 , pages 3111–3119. Curran Associates,\nInc.\nAndriy Mnih and Geoffrey E Hinton. 2009. A scal-\nable hierarchical distributed language model. In\nD. Koller, D. Schuurmans, Y . Bengio, and L. Bot-\ntou, editors, Advances in Neural Information Pro-\ncessing Systems 21 , pages 1081–1088. Curran As-\nsociates, Inc.\nAnkur P Parikh, Oscar T ¨ackstr ¨om, Dipanjan Das, and\nJakob Uszkoreit. 2016. A decomposable attention\nmodel for natural language inference. In EMNLP .\nJeffrey Pennington, Richard Socher, and Christo-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 54,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "Jakob Uszkoreit. 2016. A decomposable attention\nmodel for natural language inference. In EMNLP .\nJeffrey Pennington, Richard Socher, and Christo-\npher D. Manning. 2014. Glove: Global vectors for\nword representation. In Empirical Methods in Nat-\nural Language Processing (EMNLP) , pages 1532–\n1543.\nMatthew Peters, Waleed Ammar, Chandra Bhagavat-\nula, and Russell Power. 2017. Semi-supervised se-\nquence tagging with bidirectional language models.\nInACL.\nMatthew Peters, Mark Neumann, Mohit Iyyer, Matt\nGardner, Christopher Clark, Kenton Lee, and Luke\nZettlemoyer. 2018a. Deep contextualized word rep-\nresentations. In NAACL .Matthew Peters, Mark Neumann, Luke Zettlemoyer,\nand Wen-tau Yih. 2018b. Dissecting contextual\nword embeddings: Architecture and representation.\nInProceedings of the 2018 Conference on Empiri-\ncal Methods in Natural Language Processing , pages\n1499–1509.\nAlec Radford, Karthik Narasimhan, Tim Salimans, and\nIlya Sutskever. 2018. Improving language under-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 55,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "cal Methods in Natural Language Processing , pages\n1499–1509.\nAlec Radford, Karthik Narasimhan, Tim Salimans, and\nIlya Sutskever. 2018. Improving language under-\nstanding with unsupervised learning. Technical re-\nport, OpenAI.\nPranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and\nPercy Liang. 2016. Squad: 100,000+ questions for\nmachine comprehension of text. In Proceedings of\nthe 2016 Conference on Empirical Methods in Nat-\nural Language Processing , pages 2383–2392.\nMinjoon Seo, Aniruddha Kembhavi, Ali Farhadi, and\nHannaneh Hajishirzi. 2017. Bidirectional attention\nﬂow for machine comprehension. In ICLR .\nRichard Socher, Alex Perelygin, Jean Wu, Jason\nChuang, Christopher D Manning, Andrew Ng, and\nChristopher Potts. 2013. Recursive deep models\nfor semantic compositionality over a sentiment tree-\nbank. In Proceedings of the 2013 conference on\nempirical methods in natural language processing ,\npages 1631–1642.\nFu Sun, Linyang Li, Xipeng Qiu, and Yang Liu.",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 56,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "bank. In Proceedings of the 2013 conference on\nempirical methods in natural language processing ,\npages 1631–1642.\nFu Sun, Linyang Li, Xipeng Qiu, and Yang Liu.\n2018. U-net: Machine reading comprehension\nwith unanswerable questions. arXiv preprint\narXiv:1810.06638 .\nWilson L Taylor. 1953. Cloze procedure: A new\ntool for measuring readability. Journalism Bulletin ,\n30(4):415–433.\nErik F Tjong Kim Sang and Fien De Meulder.\n2003. Introduction to the conll-2003 shared task:\nLanguage-independent named entity recognition. In\nCoNLL .\nJoseph Turian, Lev Ratinov, and Yoshua Bengio. 2010.\nWord representations: A simple and general method\nfor semi-supervised learning. In Proceedings of the\n48th Annual Meeting of the Association for Compu-\ntational Linguistics , ACL ’10, pages 384–394.\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob\nUszkoreit, Llion Jones, Aidan N Gomez, Lukasz\nKaiser, and Illia Polosukhin. 2017. Attention is all\nyou need. In Advances in Neural Information Pro-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 57,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob\nUszkoreit, Llion Jones, Aidan N Gomez, Lukasz\nKaiser, and Illia Polosukhin. 2017. Attention is all\nyou need. In Advances in Neural Information Pro-\ncessing Systems , pages 6000–6010.\nPascal Vincent, Hugo Larochelle, Yoshua Bengio, and\nPierre-Antoine Manzagol. 2008. Extracting and\ncomposing robust features with denoising autoen-\ncoders. In Proceedings of the 25th international\nconference on Machine learning , pages 1096–1103.\nACM.\nAlex Wang, Amanpreet Singh, Julian Michael, Fe-\nlix Hill, Omer Levy, and Samuel Bowman. 2018a.\nGlue: A multi-task benchmark and analysis platform\nfor natural language understanding. In Proceedings\nof the 2018 EMNLP Workshop BlackboxNLP: An-\nalyzing and Interpreting Neural Networks for NLP ,\npages 353–355.\nWei Wang, Ming Yan, and Chen Wu. 2018b. Multi-\ngranularity hierarchical attention fusion networks\nfor reading comprehension and question answering.\nInProceedings of the 56th Annual Meeting of the As-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 58,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "Wei Wang, Ming Yan, and Chen Wu. 2018b. Multi-\ngranularity hierarchical attention fusion networks\nfor reading comprehension and question answering.\nInProceedings of the 56th Annual Meeting of the As-\nsociation for Computational Linguistics (Volume 1:\nLong Papers) . Association for Computational Lin-\nguistics.\nAlex Warstadt, Amanpreet Singh, and Samuel R Bow-\nman. 2018. Neural network acceptability judg-\nments. arXiv preprint arXiv:1805.12471 .\nAdina Williams, Nikita Nangia, and Samuel R Bow-\nman. 2018. A broad-coverage challenge corpus\nfor sentence understanding through inference. In\nNAACL .\nYonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V\nLe, Mohammad Norouzi, Wolfgang Macherey,\nMaxim Krikun, Yuan Cao, Qin Gao, Klaus\nMacherey, et al. 2016. Google’s neural ma-\nchine translation system: Bridging the gap between\nhuman and machine translation. arXiv preprint\narXiv:1609.08144 .\nJason Yosinski, Jeff Clune, Yoshua Bengio, and Hod\nLipson. 2014. How transferable are features in deep",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 59,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "human and machine translation. arXiv preprint\narXiv:1609.08144 .\nJason Yosinski, Jeff Clune, Yoshua Bengio, and Hod\nLipson. 2014. How transferable are features in deep\nneural networks? In Advances in neural information\nprocessing systems , pages 3320–3328.\nAdams Wei Yu, David Dohan, Minh-Thang Luong, Rui\nZhao, Kai Chen, Mohammad Norouzi, and Quoc V\nLe. 2018. QANet: Combining local convolution\nwith global self-attention for reading comprehen-\nsion. In ICLR .\nRowan Zellers, Yonatan Bisk, Roy Schwartz, and Yejin\nChoi. 2018. Swag: A large-scale adversarial dataset\nfor grounded commonsense inference. In Proceed-\nings of the 2018 Conference on Empirical Methods\nin Natural Language Processing (EMNLP) .\nYukun Zhu, Ryan Kiros, Rich Zemel, Ruslan Salakhut-\ndinov, Raquel Urtasun, Antonio Torralba, and Sanja\nFidler. 2015. Aligning books and movies: Towards\nstory-like visual explanations by watching movies\nand reading books. In Proceedings of the IEEE",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 60,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "dinov, Raquel Urtasun, Antonio Torralba, and Sanja\nFidler. 2015. Aligning books and movies: Towards\nstory-like visual explanations by watching movies\nand reading books. In Proceedings of the IEEE\ninternational conference on computer vision , pages\n19–27.\nAppendix for “BERT: Pre-training of\nDeep Bidirectional Transformers for\nLanguage Understanding”\nWe organize the appendix into three sections:\n• Additional implementation details for BERT\nare presented in Appendix A;• Additional details for our experiments are\npresented in Appendix B; and\n• Additional ablation studies are presented in\nAppendix C.\nWe present additional ablation studies for\nBERT including:\n–Effect of Number of Training Steps; and\n–Ablation for Different Masking Proce-\ndures.\nA Additional Details for BERT\nA.1 Illustration of the Pre-training Tasks\nWe provide examples of the pre-training tasks in\nthe following.\nMasked LM and the Masking Procedure As-\nsuming the unlabeled sentence is my dog is",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 61,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "A.1 Illustration of the Pre-training Tasks\nWe provide examples of the pre-training tasks in\nthe following.\nMasked LM and the Masking Procedure As-\nsuming the unlabeled sentence is my dog is\nhairy , and during the random masking procedure\nwe chose the 4-th token (which corresponding to\nhairy ), our masking procedure can be further il-\nlustrated by\n• 80% of the time: Replace the word with the\n[MASK] token, e.g., my dog is hairy !\nmy dog is [MASK]\n• 10% of the time: Replace the word with a\nrandom word, e.g., my dog is hairy !my\ndog is apple\n• 10% of the time: Keep the word un-\nchanged, e.g., my dog is hairy !my dog\nis hairy . The purpose of this is to bias the\nrepresentation towards the actual observed\nword.\nThe advantage of this procedure is that the\nTransformer encoder does not know which words\nit will be asked to predict or which have been re-\nplaced by random words, so it is forced to keep\na distributional contextual representation of ev-\neryinput token. Additionally, because random",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 62,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "it will be asked to predict or which have been re-\nplaced by random words, so it is forced to keep\na distributional contextual representation of ev-\neryinput token. Additionally, because random\nreplacement only occurs for 1.5% of all tokens\n(i.e., 10% of 15%), this does not seem to harm\nthe model’s language understanding capability. In\nSection C.2, we evaluate the impact this proce-\ndure.\nCompared to standard langauge model training,\nthe masked LM only make predictions on 15% of\ntokens in each batch, which suggests that more\npre-training steps may be required for the model\nBERT (Ours) \nTrm Trm Trm\nTrm Trm Trm...\n...Trm Trm Trm\nTrm Trm Trm...\n...OpenAI GPT \nLstm ELMo \nLstm Lstm \nLstm Lstm Lstm Lstm Lstm Lstm \nLstm Lstm Lstm  T1 T2 TN...\n...\n......\n...\n E1 E2 EN... T1 T2TN...\n E1 E2 EN ... T1 T2 TN...\n E1 E2 EN...Figure 3: Differences in pre-training model architectures. BERT uses a bidirectional Transformer. OpenAI GPT",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 63,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "...\n......\n...\n E1 E2 EN... T1 T2TN...\n E1 E2 EN ... T1 T2 TN...\n E1 E2 EN...Figure 3: Differences in pre-training model architectures. BERT uses a bidirectional Transformer. OpenAI GPT\nuses a left-to-right Transformer. ELMo uses the concatenation of independently trained left-to-right and right-to-\nleft LSTMs to generate features for downstream tasks. Among the three, only BERT representations are jointly\nconditioned on both left and right context in all layers. In addition to the architecture differences, BERT and\nOpenAI GPT are ﬁne-tuning approaches, while ELMo is a feature-based approach.\nto converge. In Section C.1 we demonstrate that\nMLM does converge marginally slower than a left-\nto-right model (which predicts every token), but\nthe empirical improvements of the MLM model\nfar outweigh the increased training cost.\nNext Sentence Prediction The next sentence\nprediction task can be illustrated in the following\nexamples.\nInput =[CLS] the man went to [MASK] store [SEP]",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 64,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "far outweigh the increased training cost.\nNext Sentence Prediction The next sentence\nprediction task can be illustrated in the following\nexamples.\nInput =[CLS] the man went to [MASK] store [SEP]\nhe bought a gallon [MASK] milk [SEP]\nLabel =IsNext\nInput =[CLS] the man [MASK] to the store [SEP]\npenguin [MASK] are flight ##less birds [SEP]\nLabel =NotNext\nA.2 Pre-training Procedure\nTo generate each training input sequence, we sam-\nple two spans of text from the corpus, which we\nrefer to as “sentences” even though they are typ-\nically much longer than single sentences (but can\nbe shorter also). The ﬁrst sentence receives the A\nembedding and the second receives the Bembed-\nding. 50% of the time Bis the actual next sentence\nthat follows Aand 50% of the time it is a random\nsentence, which is done for the “next sentence pre-\ndiction” task. They are sampled such that the com-\nbined length is\u0014512 tokens. The LM masking is\napplied after WordPiece tokenization with a uni-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 65,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "sentence, which is done for the “next sentence pre-\ndiction” task. They are sampled such that the com-\nbined length is\u0014512 tokens. The LM masking is\napplied after WordPiece tokenization with a uni-\nform masking rate of 15%, and no special consid-\neration given to partial word pieces.\nWe train with batch size of 256 sequences (256\nsequences * 512 tokens = 128,000 tokens/batch)\nfor 1,000,000 steps, which is approximately 40epochs over the 3.3 billion word corpus. We\nuse Adam with learning rate of 1e-4, \f1= 0:9,\n\f2= 0:999, L2 weight decay of 0:01, learning\nrate warmup over the ﬁrst 10,000 steps, and linear\ndecay of the learning rate. We use a dropout prob-\nability of 0.1 on all layers. We use a gelu acti-\nvation (Hendrycks and Gimpel, 2016) rather than\nthe standard relu , following OpenAI GPT. The\ntraining loss is the sum of the mean masked LM\nlikelihood and the mean next sentence prediction\nlikelihood.\nTraining of BERT BASE was performed on 4\nCloud TPUs in Pod conﬁguration (16 TPU chips",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 66,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "training loss is the sum of the mean masked LM\nlikelihood and the mean next sentence prediction\nlikelihood.\nTraining of BERT BASE was performed on 4\nCloud TPUs in Pod conﬁguration (16 TPU chips\ntotal).13Training of BERT LARGE was performed\non 16 Cloud TPUs (64 TPU chips total). Each pre-\ntraining took 4 days to complete.\nLonger sequences are disproportionately expen-\nsive because attention is quadratic to the sequence\nlength. To speed up pretraing in our experiments,\nwe pre-train the model with sequence length of\n128 for 90% of the steps. Then, we train the rest\n10% of the steps of sequence of 512 to learn the\npositional embeddings.\nA.3 Fine-tuning Procedure\nFor ﬁne-tuning, most model hyperparameters are\nthe same as in pre-training, with the exception of\nthe batch size, learning rate, and number of train-\ning epochs. The dropout probability was always\nkept at 0.1. The optimal hyperparameter values\nare task-speciﬁc, but we found the following range",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 67,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "the batch size, learning rate, and number of train-\ning epochs. The dropout probability was always\nkept at 0.1. The optimal hyperparameter values\nare task-speciﬁc, but we found the following range\nof possible values to work well across all tasks:\n•Batch size : 16, 32\n13https://cloudplatform.googleblog.com/2018/06/Cloud-\nTPU-now-offers-preemptible-pricing-and-global-\navailability.html\n•Learning rate (Adam) : 5e-5, 3e-5, 2e-5\n•Number of epochs : 2, 3, 4\nWe also observed that large data sets (e.g.,\n100k+ labeled training examples) were far less\nsensitive to hyperparameter choice than small data\nsets. Fine-tuning is typically very fast, so it is rea-\nsonable to simply run an exhaustive search over\nthe above parameters and choose the model that\nperforms best on the development set.\nA.4 Comparison of BERT, ELMo ,and\nOpenAI GPT\nHere we studies the differences in recent popular\nrepresentation learning models including ELMo,\nOpenAI GPT and BERT. The comparisons be-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 68,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "A.4 Comparison of BERT, ELMo ,and\nOpenAI GPT\nHere we studies the differences in recent popular\nrepresentation learning models including ELMo,\nOpenAI GPT and BERT. The comparisons be-\ntween the model architectures are shown visually\nin Figure 3. Note that in addition to the architec-\nture differences, BERT and OpenAI GPT are ﬁne-\ntuning approaches, while ELMo is a feature-based\napproach.\nThe most comparable existing pre-training\nmethod to BERT is OpenAI GPT, which trains a\nleft-to-right Transformer LM on a large text cor-\npus. In fact, many of the design decisions in BERT\nwere intentionally made to make it as close to\nGPT as possible so that the two methods could be\nminimally compared. The core argument of this\nwork is that the bi-directionality and the two pre-\ntraining tasks presented in Section 3.1 account for\nthe majority of the empirical improvements, but\nwe do note that there are several other differences\nbetween how BERT and GPT were trained:",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 69,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "training tasks presented in Section 3.1 account for\nthe majority of the empirical improvements, but\nwe do note that there are several other differences\nbetween how BERT and GPT were trained:\n• GPT is trained on the BooksCorpus (800M\nwords); BERT is trained on the BooksCor-\npus (800M words) and Wikipedia (2,500M\nwords).\n• GPT uses a sentence separator ( [SEP] ) and\nclassiﬁer token ( [CLS] ) which are only in-\ntroduced at ﬁne-tuning time; BERT learns\n[SEP] ,[CLS] and sentence A/Bembed-\ndings during pre-training.\n• GPT was trained for 1M steps with a batch\nsize of 32,000 words; BERT was trained for\n1M steps with a batch size of 128,000 words.\n• GPT used the same learning rate of 5e-5 for\nall ﬁne-tuning experiments; BERT chooses a\ntask-speciﬁc ﬁne-tuning learning rate which\nperforms the best on the development set.To isolate the effect of these differences, we per-\nform ablation experiments in Section 5.1 which\ndemonstrate that the majority of the improvements",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 70,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "performs the best on the development set.To isolate the effect of these differences, we per-\nform ablation experiments in Section 5.1 which\ndemonstrate that the majority of the improvements\nare in fact coming from the two pre-training tasks\nand the bidirectionality they enable.\nA.5 Illustrations of Fine-tuning on Different\nTasks\nThe illustration of ﬁne-tuning BERT on different\ntasks can be seen in Figure 4. Our task-speciﬁc\nmodels are formed by incorporating BERT with\none additional output layer, so a minimal num-\nber of parameters need to be learned from scratch.\nAmong the tasks, (a) and (b) are sequence-level\ntasks while (c) and (d) are token-level tasks. In\nthe ﬁgure,Erepresents the input embedding, Ti\nrepresents the contextual representation of token i,\n[CLS] is the special symbol for classiﬁcation out-\nput, and [SEP] is the special symbol to separate\nnon-consecutive token sequences.\nB Detailed Experimental Setup\nB.1 Detailed Descriptions for the GLUE\nBenchmark Experiments.",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 71,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "put, and [SEP] is the special symbol to separate\nnon-consecutive token sequences.\nB Detailed Experimental Setup\nB.1 Detailed Descriptions for the GLUE\nBenchmark Experiments.\nOur GLUE results in Table1 are obtained\nfrom https://gluebenchmark.com/\nleaderboard and https://blog.\nopenai.com/language-unsupervised .\nThe GLUE benchmark includes the following\ndatasets, the descriptions of which were originally\nsummarized in Wang et al. (2018a):\nMNLI Multi-Genre Natural Language Inference\nis a large-scale, crowdsourced entailment classiﬁ-\ncation task (Williams et al., 2018). Given a pair of\nsentences, the goal is to predict whether the sec-\nond sentence is an entailment ,contradiction , or\nneutral with respect to the ﬁrst one.\nQQP Quora Question Pairs is a binary classiﬁ-\ncation task where the goal is to determine if two\nquestions asked on Quora are semantically equiv-\nalent (Chen et al., 2018).\nQNLI Question Natural Language Inference is\na version of the Stanford Question Answering",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 72,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "questions asked on Quora are semantically equiv-\nalent (Chen et al., 2018).\nQNLI Question Natural Language Inference is\na version of the Stanford Question Answering\nDataset (Rajpurkar et al., 2016) which has been\nconverted to a binary classiﬁcation task (Wang\net al., 2018a). The positive examples are (ques-\ntion, sentence) pairs which do contain the correct\nanswer, and the negative examples are (question,\nsentence) from the same paragraph which do not\ncontain the answer.\nBERT \nE[CLS] E1 E[SEP] ... ENE1’... EM’\nC\nT1\nT[SEP] ...\n TN\nT1’...\n TM’\n[CLS] Tok \n1 [SEP] ...Tok \nNTok \n1...Tok\nM\nQuestion Paragraph BERT \nE[CLS] E1 E2 EN\nC\nT1\n T2\n TN\nSingle Sentence ...\n...BERT \nTok 1 Tok 2 Tok N ... [CLS]E[CLS] E1 E2 EN\nC\nT1\n T2\n TN\nSingle Sentence \nB-PER O O...\n... E[CLS] E1 E[SEP] Class \nLabel \n... ENE1’... EM’\nC\nT1\nT[SEP] ...\n TN\nT1’...\n TM’\nStart/End Span Class \nLabel \nBERT \nTok 1 Tok 2 Tok N ... [CLS]Tok 1[CLS] [CLS] Tok \n1 [SEP] ...Tok \nNTok \n1...Tok\nM\nSentence 1 \n...Sentence 2",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 73,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "Label \n... ENE1’... EM’\nC\nT1\nT[SEP] ...\n TN\nT1’...\n TM’\nStart/End Span Class \nLabel \nBERT \nTok 1 Tok 2 Tok N ... [CLS]Tok 1[CLS] [CLS] Tok \n1 [SEP] ...Tok \nNTok \n1...Tok\nM\nSentence 1 \n...Sentence 2 \nFigure 4: Illustrations of Fine-tuning BERT on Different Tasks.\nSST-2 The Stanford Sentiment Treebank is a\nbinary single-sentence classiﬁcation task consist-\ning of sentences extracted from movie reviews\nwith human annotations of their sentiment (Socher\net al., 2013).\nCoLA The Corpus of Linguistic Acceptability is\na binary single-sentence classiﬁcation task, where\nthe goal is to predict whether an English sentence\nis linguistically “acceptable” or not (Warstadt\net al., 2018).\nSTS-B The Semantic Textual Similarity Bench-\nmark is a collection of sentence pairs drawn from\nnews headlines and other sources (Cer et al.,\n2017). They were annotated with a score from 1\nto 5 denoting how similar the two sentences are in\nterms of semantic meaning.\nMRPC Microsoft Research Paraphrase Corpus",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 74,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "2017). They were annotated with a score from 1\nto 5 denoting how similar the two sentences are in\nterms of semantic meaning.\nMRPC Microsoft Research Paraphrase Corpus\nconsists of sentence pairs automatically extracted\nfrom online news sources, with human annotationsfor whether the sentences in the pair are semanti-\ncally equivalent (Dolan and Brockett, 2005).\nRTE Recognizing Textual Entailment is a bi-\nnary entailment task similar to MNLI, but with\nmuch less training data (Bentivogli et al., 2009).14\nWNLI Winograd NLI is a small natural lan-\nguage inference dataset (Levesque et al., 2011).\nThe GLUE webpage notes that there are issues\nwith the construction of this dataset,15and every\ntrained system that’s been submitted to GLUE has\nperformed worse than the 65.1 baseline accuracy\nof predicting the majority class. We therefore ex-\nclude this set to be fair to OpenAI GPT. For our\nGLUE submission, we always predicted the ma-\n14Note that we only report single-task ﬁne-tuning results",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 75,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "clude this set to be fair to OpenAI GPT. For our\nGLUE submission, we always predicted the ma-\n14Note that we only report single-task ﬁne-tuning results\nin this paper. A multitask ﬁne-tuning approach could poten-\ntially push the performance even further. For example, we\ndid observe substantial improvements on RTE from multi-\ntask training with MNLI.\n15https://gluebenchmark.com/faq\njority class.\nC Additional Ablation Studies\nC.1 Effect of Number of Training Steps\nFigure 5 presents MNLI Dev accuracy after ﬁne-\ntuning from a checkpoint that has been pre-trained\nforksteps. This allows us to answer the following\nquestions:\n1. Question: Does BERT really need such\na large amount of pre-training (128,000\nwords/batch * 1,000,000 steps) to achieve\nhigh ﬁne-tuning accuracy?\nAnswer: Yes, BERT BASE achieves almost\n1.0% additional accuracy on MNLI when\ntrained on 1M steps compared to 500k steps.\n2. Question: Does MLM pre-training converge\nslower than LTR pre-training, since only 15%",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 76,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "1.0% additional accuracy on MNLI when\ntrained on 1M steps compared to 500k steps.\n2. Question: Does MLM pre-training converge\nslower than LTR pre-training, since only 15%\nof words are predicted in each batch rather\nthan every word?\nAnswer: The MLM model does converge\nslightly slower than the LTR model. How-\never, in terms of absolute accuracy the MLM\nmodel begins to outperform the LTR model\nalmost immediately.\nC.2 Ablation for Different Masking\nProcedures\nIn Section 3.1, we mention that BERT uses a\nmixed strategy for masking the target tokens when\npre-training with the masked language model\n(MLM) objective. The following is an ablation\nstudy to evaluate the effect of different masking\nstrategies.\n200 400 600 800 1;0007678808284\nPre-training Steps (Thousands)MNLI Dev Accuracy\nBERT BASE (Masked LM)\nBERT BASE (Left-to-Right)\nFigure 5: Ablation over number of training steps. This\nshows the MNLI accuracy after ﬁne-tuning, starting\nfrom model parameters that have been pre-trained for",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 77,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "BERT BASE (Left-to-Right)\nFigure 5: Ablation over number of training steps. This\nshows the MNLI accuracy after ﬁne-tuning, starting\nfrom model parameters that have been pre-trained for\nksteps. The x-axis is the value of k.Note that the purpose of the masking strategies\nis to reduce the mismatch between pre-training\nand ﬁne-tuning, as the [MASK] symbol never ap-\npears during the ﬁne-tuning stage. We report the\nDev results for both MNLI and NER. For NER,\nwe report both ﬁne-tuning and feature-based ap-\nproaches, as we expect the mismatch will be am-\npliﬁed for the feature-based approach as the model\nwill not have the chance to adjust the representa-\ntions.\nMasking Rates Dev Set Results\nMASK SAME RND MNLI NER\nFine-tune Fine-tune Feature-based\n80% 10% 10% 84.2 95.4 94.9\n100% 0% 0% 84.3 94.9 94.0\n80% 0% 20% 84.1 95.2 94.6\n80% 20% 0% 84.4 95.2 94.7\n0% 20% 80% 83.7 94.8 94.6\n0% 0% 100% 83.6 94.9 94.6\nTable 8: Ablation over different masking strategies.",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 78,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "100% 0% 0% 84.3 94.9 94.0\n80% 0% 20% 84.1 95.2 94.6\n80% 20% 0% 84.4 95.2 94.7\n0% 20% 80% 83.7 94.8 94.6\n0% 0% 100% 83.6 94.9 94.6\nTable 8: Ablation over different masking strategies.\nThe results are presented in Table 8. In the table,\nMASK means that we replace the target token with\nthe[MASK] symbol for MLM; S AME means that\nwe keep the target token as is; R NDmeans that\nwe replace the target token with another random\ntoken.\nThe numbers in the left part of the table repre-\nsent the probabilities of the speciﬁc strategies used\nduring MLM pre-training (BERT uses 80%, 10%,\n10%). The right part of the paper represents the\nDev set results. For the feature-based approach,\nwe concatenate the last 4 layers of BERT as the\nfeatures, which was shown to be the best approach\nin Section 5.3.\nFrom the table it can be seen that ﬁne-tuning is\nsurprisingly robust to different masking strategies.\nHowever, as expected, using only the M ASK strat-\negy was problematic when applying the feature-",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 79,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "From the table it can be seen that ﬁne-tuning is\nsurprisingly robust to different masking strategies.\nHowever, as expected, using only the M ASK strat-\negy was problematic when applying the feature-\nbased approach to NER. Interestingly, using only\nthe R NDstrategy performs much worse than our\nstrategy as well.",
    "metadata": {
      "source": "bert_paper",
      "description": "BERT: Pre-training of Deep Bidirectional Transformers",
      "chunk_id": 80,
      "total_chunks": 81,
      "file_type": "pdf"
    }
  },
  {
    "content": "Deep Residual Learning for Image Recognition\nKaiming He Xiangyu Zhang Shaoqing Ren Jian Sun\nMicrosoft Research\nfkahe, v-xiangz, v-shren, jiansun g@microsoft.com\nAbstract\nDeeper neural networks are more difﬁcult to train. We\npresent a residual learning framework to ease the training\nof networks that are substantially deeper than those used\npreviously. We explicitly reformulate the layers as learn-\ning residual functions with reference to the layer inputs, in-\nstead of learning unreferenced functions. We provide com-\nprehensive empirical evidence showing that these residual\nnetworks are easier to optimize, and can gain accuracy from\nconsiderably increased depth. On the ImageNet dataset we\nevaluate residual nets with a depth of up to 152 layers—8 \u0002\ndeeper than VGG nets [41] but still having lower complex-\nity. An ensemble of these residual nets achieves 3.57% error\non the ImageNet testset. This result won the 1st place on the\nILSVRC 2015 classiﬁcation task. We also present analysis",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 0,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "ity. An ensemble of these residual nets achieves 3.57% error\non the ImageNet testset. This result won the 1st place on the\nILSVRC 2015 classiﬁcation task. We also present analysis\non CIFAR-10 with 100 and 1000 layers.\nThe depth of representations is of central importance\nfor many visual recognition tasks. Solely due to our ex-\ntremely deep representations, we obtain a 28% relative im-\nprovement on the COCO object detection dataset. Deep\nresidual nets are foundations of our submissions to ILSVRC\n& COCO 2015 competitions1, where we also won the 1st\nplaces on the tasks of ImageNet detection, ImageNet local-\nization, COCO detection, and COCO segmentation.\n1. Introduction\nDeep convolutional neural networks [22, 21] have led\nto a series of breakthroughs for image classiﬁcation [21,\n50, 40]. Deep networks naturally integrate low/mid/high-\nlevel features [50] and classiﬁers in an end-to-end multi-\nlayer fashion, and the “levels” of features can be enriched",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 1,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "50, 40]. Deep networks naturally integrate low/mid/high-\nlevel features [50] and classiﬁers in an end-to-end multi-\nlayer fashion, and the “levels” of features can be enriched\nby the number of stacked layers (depth). Recent evidence\n[41, 44] reveals that network depth is of crucial importance,\nand the leading results [41, 44, 13, 16] on the challenging\nImageNet dataset [36] all exploit “very deep” [41] models,\nwith a depth of sixteen [41] to thirty [16]. Many other non-\ntrivial visual recognition tasks [8, 12, 7, 32, 27] have also\n1http://image-net.org/challenges/LSVRC/2015/ and\nhttp://mscoco.org/dataset/#detections-challenge2015 .\n0 1 2 3 4 5 60 1020\niter. (1e4)training error (%)\n  \n0 1 2 3 4 5 601020\niter. (1e4)test error (%)\n  \n56-layer\n20-layer56-layer\n20-layerFigure 1. Training error (left) and test error (right) on CIFAR-10\nwith 20-layer and 56-layer “plain” networks. The deeper network\nhas higher training error, and thus test error. Similar phenomena",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 2,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "with 20-layer and 56-layer “plain” networks. The deeper network\nhas higher training error, and thus test error. Similar phenomena\non ImageNet is presented in Fig. 4.\ngreatly beneﬁted from very deep models.\nDriven by the signiﬁcance of depth, a question arises: Is\nlearning better networks as easy as stacking more layers?\nAn obstacle to answering this question was the notorious\nproblem of vanishing/exploding gradients [1, 9], which\nhamper convergence from the beginning. This problem,\nhowever, has been largely addressed by normalized initial-\nization [23, 9, 37, 13] and intermediate normalization layers\n[16], which enable networks with tens of layers to start con-\nverging for stochastic gradient descent (SGD) with back-\npropagation [22].\nWhen deeper networks are able to start converging, a\ndegradation problem has been exposed: with the network\ndepth increasing, accuracy gets saturated (which might be\nunsurprising) and then degrades rapidly. Unexpectedly,",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 3,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "degradation problem has been exposed: with the network\ndepth increasing, accuracy gets saturated (which might be\nunsurprising) and then degrades rapidly. Unexpectedly,\nsuch degradation is not caused by overﬁtting , and adding\nmore layers to a suitably deep model leads to higher train-\ning error , as reported in [11, 42] and thoroughly veriﬁed by\nour experiments. Fig. 1 shows a typical example.\nThe degradation (of training accuracy) indicates that not\nall systems are similarly easy to optimize. Let us consider a\nshallower architecture and its deeper counterpart that adds\nmore layers onto it. There exists a solution by construction\nto the deeper model: the added layers are identity mapping,\nand the other layers are copied from the learned shallower\nmodel. The existence of this constructed solution indicates\nthat a deeper model should produce no higher training error\nthan its shallower counterpart. But experiments show that\nour current solvers on hand are unable to ﬁnd solutions that",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 4,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "that a deeper model should produce no higher training error\nthan its shallower counterpart. But experiments show that\nour current solvers on hand are unable to ﬁnd solutions that\n1arXiv:1512.03385v1  [cs.CV]  10 Dec 2015\nidentityweight layer\nweight layerrelu\nreluF(x)\u0001+\u0001xx\nF(x)xFigure 2. Residual learning: a building block.\nare comparably good or better than the constructed solution\n(or unable to do so in feasible time).\nIn this paper, we address the degradation problem by\nintroducing a deep residual learning framework. In-\nstead of hoping each few stacked layers directly ﬁt a\ndesired underlying mapping, we explicitly let these lay-\ners ﬁt a residual mapping. Formally, denoting the desired\nunderlying mapping as H(x), we let the stacked nonlinear\nlayers ﬁt another mapping of F(x) :=H(x)\u0000x. The orig-\ninal mapping is recast into F(x)+x. We hypothesize that it\nis easier to optimize the residual mapping than to optimize\nthe original, unreferenced mapping. To the extreme, if an",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 5,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "inal mapping is recast into F(x)+x. We hypothesize that it\nis easier to optimize the residual mapping than to optimize\nthe original, unreferenced mapping. To the extreme, if an\nidentity mapping were optimal, it would be easier to push\nthe residual to zero than to ﬁt an identity mapping by a stack\nof nonlinear layers.\nThe formulation of F(x)+xcan be realized by feedfor-\nward neural networks with “shortcut connections” (Fig. 2).\nShortcut connections [2, 34, 49] are those skipping one or\nmore layers. In our case, the shortcut connections simply\nperform identity mapping, and their outputs are added to\nthe outputs of the stacked layers (Fig. 2). Identity short-\ncut connections add neither extra parameter nor computa-\ntional complexity. The entire network can still be trained\nend-to-end by SGD with backpropagation, and can be eas-\nily implemented using common libraries ( e.g., Caffe [19])\nwithout modifying the solvers.\nWe present comprehensive experiments on ImageNet",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 6,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "end-to-end by SGD with backpropagation, and can be eas-\nily implemented using common libraries ( e.g., Caffe [19])\nwithout modifying the solvers.\nWe present comprehensive experiments on ImageNet\n[36] to show the degradation problem and evaluate our\nmethod. We show that: 1) Our extremely deep residual nets\nare easy to optimize, but the counterpart “plain” nets (that\nsimply stack layers) exhibit higher training error when the\ndepth increases; 2) Our deep residual nets can easily enjoy\naccuracy gains from greatly increased depth, producing re-\nsults substantially better than previous networks.\nSimilar phenomena are also shown on the CIFAR-10 set\n[20], suggesting that the optimization difﬁculties and the\neffects of our method are not just akin to a particular dataset.\nWe present successfully trained models on this dataset with\nover 100 layers, and explore models with over 1000 layers.\nOn the ImageNet classiﬁcation dataset [36], we obtain",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 7,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "We present successfully trained models on this dataset with\nover 100 layers, and explore models with over 1000 layers.\nOn the ImageNet classiﬁcation dataset [36], we obtain\nexcellent results by extremely deep residual nets. Our 152-\nlayer residual net is the deepest network ever presented on\nImageNet, while still having lower complexity than VGG\nnets [41]. Our ensemble has 3.57% top-5 error on theImageNet testset, and won the 1st place in the ILSVRC\n2015 classiﬁcation competition . The extremely deep rep-\nresentations also have excellent generalization performance\non other recognition tasks, and lead us to further win the\n1st places on: ImageNet detection, ImageNet localization,\nCOCO detection, and COCO segmentation in ILSVRC &\nCOCO 2015 competitions. This strong evidence shows that\nthe residual learning principle is generic, and we expect that\nit is applicable in other vision and non-vision problems.\n2. Related Work\nResidual Representations. In image recognition, VLAD",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 8,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "the residual learning principle is generic, and we expect that\nit is applicable in other vision and non-vision problems.\n2. Related Work\nResidual Representations. In image recognition, VLAD\n[18] is a representation that encodes by the residual vectors\nwith respect to a dictionary, and Fisher Vector [30] can be\nformulated as a probabilistic version [18] of VLAD. Both\nof them are powerful shallow representations for image re-\ntrieval and classiﬁcation [4, 48]. For vector quantization,\nencoding residual vectors [17] is shown to be more effec-\ntive than encoding original vectors.\nIn low-level vision and computer graphics, for solv-\ning Partial Differential Equations (PDEs), the widely used\nMultigrid method [3] reformulates the system as subprob-\nlems at multiple scales, where each subproblem is respon-\nsible for the residual solution between a coarser and a ﬁner\nscale. An alternative to Multigrid is hierarchical basis pre-\nconditioning [45, 46], which relies on variables that repre-",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 9,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "sible for the residual solution between a coarser and a ﬁner\nscale. An alternative to Multigrid is hierarchical basis pre-\nconditioning [45, 46], which relies on variables that repre-\nsent residual vectors between two scales. It has been shown\n[3, 45, 46] that these solvers converge much faster than stan-\ndard solvers that are unaware of the residual nature of the\nsolutions. These methods suggest that a good reformulation\nor preconditioning can simplify the optimization.\nShortcut Connections. Practices and theories that lead to\nshortcut connections [2, 34, 49] have been studied for a long\ntime. An early practice of training multi-layer perceptrons\n(MLPs) is to add a linear layer connected from the network\ninput to the output [34, 49]. In [44, 24], a few interme-\ndiate layers are directly connected to auxiliary classiﬁers\nfor addressing vanishing/exploding gradients. The papers\nof [39, 38, 31, 47] propose methods for centering layer re-",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 10,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "diate layers are directly connected to auxiliary classiﬁers\nfor addressing vanishing/exploding gradients. The papers\nof [39, 38, 31, 47] propose methods for centering layer re-\nsponses, gradients, and propagated errors, implemented by\nshortcut connections. In [44], an “inception” layer is com-\nposed of a shortcut branch and a few deeper branches.\nConcurrent with our work, “highway networks” [42, 43]\npresent shortcut connections with gating functions [15].\nThese gates are data-dependent and have parameters, in\ncontrast to our identity shortcuts that are parameter-free.\nWhen a gated shortcut is “closed” (approaching zero), the\nlayers in highway networks represent non-residual func-\ntions. On the contrary, our formulation always learns\nresidual functions; our identity shortcuts are never closed,\nand all information is always passed through, with addi-\ntional residual functions to be learned. In addition, high-\n2\nway networks have not demonstrated accuracy gains with",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 11,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "and all information is always passed through, with addi-\ntional residual functions to be learned. In addition, high-\n2\nway networks have not demonstrated accuracy gains with\nextremely increased depth ( e.g., over 100 layers).\n3. Deep Residual Learning\n3.1. Residual Learning\nLet us considerH(x)as an underlying mapping to be\nﬁt by a few stacked layers (not necessarily the entire net),\nwithxdenoting the inputs to the ﬁrst of these layers. If one\nhypothesizes that multiple nonlinear layers can asymptoti-\ncally approximate complicated functions2, then it is equiv-\nalent to hypothesize that they can asymptotically approxi-\nmate the residual functions, i.e.,H(x)\u0000x(assuming that\nthe input and output are of the same dimensions). So\nrather than expect stacked layers to approximate H(x), we\nexplicitly let these layers approximate a residual function\nF(x) :=H(x)\u0000x. The original function thus becomes\nF(x)+x. Although both forms should be able to asymptot-",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 12,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "explicitly let these layers approximate a residual function\nF(x) :=H(x)\u0000x. The original function thus becomes\nF(x)+x. Although both forms should be able to asymptot-\nically approximate the desired functions (as hypothesized),\nthe ease of learning might be different.\nThis reformulation is motivated by the counterintuitive\nphenomena about the degradation problem (Fig. 1, left). As\nwe discussed in the introduction, if the added layers can\nbe constructed as identity mappings, a deeper model should\nhave training error no greater than its shallower counter-\npart. The degradation problem suggests that the solvers\nmight have difﬁculties in approximating identity mappings\nby multiple nonlinear layers. With the residual learning re-\nformulation, if identity mappings are optimal, the solvers\nmay simply drive the weights of the multiple nonlinear lay-\ners toward zero to approach identity mappings.\nIn real cases, it is unlikely that identity mappings are op-",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 13,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "may simply drive the weights of the multiple nonlinear lay-\ners toward zero to approach identity mappings.\nIn real cases, it is unlikely that identity mappings are op-\ntimal, but our reformulation may help to precondition the\nproblem. If the optimal function is closer to an identity\nmapping than to a zero mapping, it should be easier for the\nsolver to ﬁnd the perturbations with reference to an identity\nmapping, than to learn the function as a new one. We show\nby experiments (Fig. 7) that the learned residual functions in\ngeneral have small responses, suggesting that identity map-\npings provide reasonable preconditioning.\n3.2. Identity Mapping by Shortcuts\nWe adopt residual learning to every few stacked layers.\nA building block is shown in Fig. 2. Formally, in this paper\nwe consider a building block deﬁned as:\ny=F(x;fWig) +x: (1)\nHere xandyare the input and output vectors of the lay-\ners considered. The function F(x;fWig)represents the",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 14,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "we consider a building block deﬁned as:\ny=F(x;fWig) +x: (1)\nHere xandyare the input and output vectors of the lay-\ners considered. The function F(x;fWig)represents the\nresidual mapping to be learned. For the example in Fig. 2\nthat has two layers, F=W2\u001b(W1x)in which\u001bdenotes\n2This hypothesis, however, is still an open question. See [28].ReLU [29] and the biases are omitted for simplifying no-\ntations. The operation F+xis performed by a shortcut\nconnection and element-wise addition. We adopt the sec-\nond nonlinearity after the addition ( i.e.,\u001b(y), see Fig. 2).\nThe shortcut connections in Eqn.(1) introduce neither ex-\ntra parameter nor computation complexity. This is not only\nattractive in practice but also important in our comparisons\nbetween plain and residual networks. We can fairly com-\npare plain/residual networks that simultaneously have the\nsame number of parameters, depth, width, and computa-\ntional cost (except for the negligible element-wise addition).",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 15,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "pare plain/residual networks that simultaneously have the\nsame number of parameters, depth, width, and computa-\ntional cost (except for the negligible element-wise addition).\nThe dimensions of xandFmust be equal in Eqn.(1).\nIf this is not the case ( e.g., when changing the input/output\nchannels), we can perform a linear projection Wsby the\nshortcut connections to match the dimensions:\ny=F(x;fWig) +Wsx: (2)\nWe can also use a square matrix Wsin Eqn.(1). But we will\nshow by experiments that the identity mapping is sufﬁcient\nfor addressing the degradation problem and is economical,\nand thusWsis only used when matching dimensions.\nThe form of the residual function Fis ﬂexible. Exper-\niments in this paper involve a function Fthat has two or\nthree layers (Fig. 5), while more layers are possible. But if\nFhas only a single layer, Eqn.(1) is similar to a linear layer:\ny=W1x+x, for which we have not observed advantages.\nWe also note that although the above notations are about",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 16,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "Fhas only a single layer, Eqn.(1) is similar to a linear layer:\ny=W1x+x, for which we have not observed advantages.\nWe also note that although the above notations are about\nfully-connected layers for simplicity, they are applicable to\nconvolutional layers. The function F(x;fWig)can repre-\nsent multiple convolutional layers. The element-wise addi-\ntion is performed on two feature maps, channel by channel.\n3.3. Network Architectures\nWe have tested various plain/residual nets, and have ob-\nserved consistent phenomena. To provide instances for dis-\ncussion, we describe two models for ImageNet as follows.\nPlain Network. Our plain baselines (Fig. 3, middle) are\nmainly inspired by the philosophy of VGG nets [41] (Fig. 3,\nleft). The convolutional layers mostly have 3 \u00023 ﬁlters and\nfollow two simple design rules: (i) for the same output\nfeature map size, the layers have the same number of ﬁl-\nters; and (ii) if the feature map size is halved, the num-",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 17,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "follow two simple design rules: (i) for the same output\nfeature map size, the layers have the same number of ﬁl-\nters; and (ii) if the feature map size is halved, the num-\nber of ﬁlters is doubled so as to preserve the time com-\nplexity per layer. We perform downsampling directly by\nconvolutional layers that have a stride of 2. The network\nends with a global average pooling layer and a 1000-way\nfully-connected layer with softmax. The total number of\nweighted layers is 34 in Fig. 3 (middle).\nIt is worth noticing that our model has fewer ﬁlters and\nlower complexity than VGG nets [41] (Fig. 3, left). Our 34-\nlayer baseline has 3.6 billion FLOPs (multiply-adds), which\nis only 18% of VGG-19 (19.6 billion FLOPs).\n3\n7x7 conv, 64, /2\npool, /2\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 128, /2\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 256, /2\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 18,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "3x3 conv, 64\n3x3 conv, 128, /2\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 256, /2\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 512, /2\n3x3 conv, 512\n3x3 conv, 512\n3x3 conv, 512\n3x3 conv, 512\n3x3 conv, 512\navg pool\nfc 1000image\n3x3 conv, 5123x3 conv, 64\n3x3 conv, 64\npool, /2\n3x3 conv, 128\n3x3 conv, 128\npool, /2\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\npool, /2\n3x3 conv, 512\n3x3 conv, 512\n3x3 conv, 512\npool, /2\n3x3 conv, 512\n3x3 conv, 512\n3x3 conv, 512\n3x3 conv, 512\npool, /2\nfc 4096\nfc 4096\nfc 1000image\noutput \nsize: 112output \nsize: 224\noutput \nsize: 56\noutput \nsize: 28\noutput \nsize: 14\noutput \nsize: 7\noutput \nsize: 1VGG-19 34-layer plain\n7x7 conv, 64, /2\npool, /2\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 128, /2\n3x3 conv, 128\n3x3 conv, 128",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 19,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "size: 7\noutput \nsize: 1VGG-19 34-layer plain\n7x7 conv, 64, /2\npool, /2\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 64\n3x3 conv, 128, /2\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 128\n3x3 conv, 256, /2\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 256\n3x3 conv, 512, /2\n3x3 conv, 512\n3x3 conv, 512\n3x3 conv, 512\n3x3 conv, 512\n3x3 conv, 512\navg pool\nfc 1000image34-layer residualFigure 3. Example network architectures for ImageNet. Left: the\nVGG-19 model [41] (19.6 billion FLOPs) as a reference. Mid-\ndle: a plain network with 34 parameter layers (3.6 billion FLOPs).\nRight : a residual network with 34 parameter layers (3.6 billion\nFLOPs). The dotted shortcuts increase dimensions. Table 1 shows\nmore details and other variants.Residual Network. Based on the above plain network, we",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 20,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "FLOPs). The dotted shortcuts increase dimensions. Table 1 shows\nmore details and other variants.Residual Network. Based on the above plain network, we\ninsert shortcut connections (Fig. 3, right) which turn the\nnetwork into its counterpart residual version. The identity\nshortcuts (Eqn.(1)) can be directly used when the input and\noutput are of the same dimensions (solid line shortcuts in\nFig. 3). When the dimensions increase (dotted line shortcuts\nin Fig. 3), we consider two options: (A) The shortcut still\nperforms identity mapping, with extra zero entries padded\nfor increasing dimensions. This option introduces no extra\nparameter; (B) The projection shortcut in Eqn.(2) is used to\nmatch dimensions (done by 1 \u00021 convolutions). For both\noptions, when the shortcuts go across feature maps of two\nsizes, they are performed with a stride of 2.\n3.4. Implementation\nOur implementation for ImageNet follows the practice\nin [21, 41]. The image is resized with its shorter side ran-",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 21,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "sizes, they are performed with a stride of 2.\n3.4. Implementation\nOur implementation for ImageNet follows the practice\nin [21, 41]. The image is resized with its shorter side ran-\ndomly sampled in [256;480] for scale augmentation [41].\nA 224\u0002224 crop is randomly sampled from an image or its\nhorizontal ﬂip, with the per-pixel mean subtracted [21]. The\nstandard color augmentation in [21] is used. We adopt batch\nnormalization (BN) [16] right after each convolution and\nbefore activation, following [16]. We initialize the weights\nas in [13] and train all plain/residual nets from scratch. We\nuse SGD with a mini-batch size of 256. The learning rate\nstarts from 0.1 and is divided by 10 when the error plateaus,\nand the models are trained for up to 60\u0002104iterations. We\nuse a weight decay of 0.0001 and a momentum of 0.9. We\ndo not use dropout [14], following the practice in [16].\nIn testing, for comparison studies we adopt the standard\n10-crop testing [21]. For best results, we adopt the fully-",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 22,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "do not use dropout [14], following the practice in [16].\nIn testing, for comparison studies we adopt the standard\n10-crop testing [21]. For best results, we adopt the fully-\nconvolutional form as in [41, 13], and average the scores\nat multiple scales (images are resized such that the shorter\nside is inf224;256;384;480;640g).\n4. Experiments\n4.1. ImageNet Classiﬁcation\nWe evaluate our method on the ImageNet 2012 classiﬁ-\ncation dataset [36] that consists of 1000 classes. The models\nare trained on the 1.28 million training images, and evalu-\nated on the 50k validation images. We also obtain a ﬁnal\nresult on the 100k test images, reported by the test server.\nWe evaluate both top-1 and top-5 error rates.\nPlain Networks. We ﬁrst evaluate 18-layer and 34-layer\nplain nets. The 34-layer plain net is in Fig. 3 (middle). The\n18-layer plain net is of a similar form. See Table 1 for de-\ntailed architectures.\nThe results in Table 2 show that the deeper 34-layer plain",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 23,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "18-layer plain net is of a similar form. See Table 1 for de-\ntailed architectures.\nThe results in Table 2 show that the deeper 34-layer plain\nnet has higher validation error than the shallower 18-layer\nplain net. To reveal the reasons, in Fig. 4 (left) we com-\npare their training/validation errors during the training pro-\ncedure. We have observed the degradation problem - the\n4\nlayer name output size 18-layer 34-layer 50-layer 101-layer 152-layer\nconv1 112\u0002112 7\u00027, 64, stride 2\nconv2 x 56\u0002563\u00023 max pool, stride 2\n\u0014\n3\u00023, 64\n3\u00023, 64\u0015\n\u00022\u0014\n3\u00023, 64\n3\u00023, 64\u0015\n\u000232\n41\u00021, 64\n3\u00023, 64\n1\u00021, 2563\n5\u000232\n41\u00021, 64\n3\u00023, 64\n1\u00021, 2563\n5\u000232\n41\u00021, 64\n3\u00023, 64\n1\u00021, 2563\n5\u00023\nconv3 x 28\u000228\u0014\n3\u00023, 128\n3\u00023, 128\u0015\n\u00022\u0014\n3\u00023, 128\n3\u00023, 128\u0015\n\u000242\n41\u00021, 128\n3\u00023, 128\n1\u00021, 5123\n5\u000242\n41\u00021, 128\n3\u00023, 128\n1\u00021, 5123\n5\u000242\n41\u00021, 128\n3\u00023, 128\n1\u00021, 5123\n5\u00028\nconv4 x 14\u000214\u0014\n3\u00023, 256\n3\u00023, 256\u0015\n\u00022\u0014\n3\u00023, 256\n3\u00023, 256\u0015\n\u000262\n41\u00021, 256\n3\u00023, 256\n1\u00021, 10243\n5\u000262\n41\u00021, 256\n3\u00023, 256\n1\u00021, 10243\n5\u0002232\n41\u00021, 256\n3\u00023, 256\n1\u00021, 10243\n5\u000236\nconv5 x 7\u00027\u0014",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 24,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "1\u00021, 5123\n5\u00028\nconv4 x 14\u000214\u0014\n3\u00023, 256\n3\u00023, 256\u0015\n\u00022\u0014\n3\u00023, 256\n3\u00023, 256\u0015\n\u000262\n41\u00021, 256\n3\u00023, 256\n1\u00021, 10243\n5\u000262\n41\u00021, 256\n3\u00023, 256\n1\u00021, 10243\n5\u0002232\n41\u00021, 256\n3\u00023, 256\n1\u00021, 10243\n5\u000236\nconv5 x 7\u00027\u0014\n3\u00023, 512\n3\u00023, 512\u0015\n\u00022\u0014\n3\u00023, 512\n3\u00023, 512\u0015\n\u000232\n41\u00021, 512\n3\u00023, 512\n1\u00021, 20483\n5\u000232\n41\u00021, 512\n3\u00023, 512\n1\u00021, 20483\n5\u000232\n41\u00021, 512\n3\u00023, 512\n1\u00021, 20483\n5\u00023\n1\u00021 average pool, 1000-d fc, softmax\nFLOPs 1.8\u00021093.6\u00021093.8\u00021097.6\u000210911.3\u0002109\nTable 1. Architectures for ImageNet. Building blocks are shown in brackets (see also Fig. 5), with the numbers of blocks stacked. Down-\nsampling is performed by conv3 1, conv4 1, and conv5 1 with a stride of 2.\n0 10 20 30 40 502030405060\niter. (1e4)error (%)\n  \nplain-18\nplain-34\n0 10 20 30 40 502030405060\niter. (1e4)error (%)\n  \nResNet-18\nResNet-3418-layer34-layer\n18-layer\n34-layer\nFigure 4. Training on ImageNet . Thin curves denote training error, and bold curves denote validation error of the center crops. Left: plain",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 25,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "ResNet-18\nResNet-3418-layer34-layer\n18-layer\n34-layer\nFigure 4. Training on ImageNet . Thin curves denote training error, and bold curves denote validation error of the center crops. Left: plain\nnetworks of 18 and 34 layers. Right: ResNets of 18 and 34 layers. In this plot, the residual networks have no extra parameter compared to\ntheir plain counterparts.\nplain ResNet\n18 layers 27.94 27.88\n34 layers 28.54 25.03\nTable 2. Top-1 error (%, 10-crop testing) on ImageNet validation.\nHere the ResNets have no extra parameter compared to their plain\ncounterparts. Fig. 4 shows the training procedures.\n34-layer plain net has higher training error throughout the\nwhole training procedure, even though the solution space\nof the 18-layer plain network is a subspace of that of the\n34-layer one.\nWe argue that this optimization difﬁculty is unlikely to\nbe caused by vanishing gradients. These plain networks are\ntrained with BN [16], which ensures forward propagated",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 26,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "34-layer one.\nWe argue that this optimization difﬁculty is unlikely to\nbe caused by vanishing gradients. These plain networks are\ntrained with BN [16], which ensures forward propagated\nsignals to have non-zero variances. We also verify that the\nbackward propagated gradients exhibit healthy norms with\nBN. So neither forward nor backward signals vanish. In\nfact, the 34-layer plain net is still able to achieve compet-\nitive accuracy (Table 3), suggesting that the solver works\nto some extent. We conjecture that the deep plain nets may\nhave exponentially low convergence rates, which impact thereducing of the training error3. The reason for such opti-\nmization difﬁculties will be studied in the future.\nResidual Networks. Next we evaluate 18-layer and 34-\nlayer residual nets ( ResNets ). The baseline architectures\nare the same as the above plain nets, expect that a shortcut\nconnection is added to each pair of 3 \u00023 ﬁlters as in Fig. 3",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 27,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "layer residual nets ( ResNets ). The baseline architectures\nare the same as the above plain nets, expect that a shortcut\nconnection is added to each pair of 3 \u00023 ﬁlters as in Fig. 3\n(right). In the ﬁrst comparison (Table 2 and Fig. 4 right),\nwe use identity mapping for all shortcuts and zero-padding\nfor increasing dimensions (option A). So they have no extra\nparameter compared to the plain counterparts.\nWe have three major observations from Table 2 and\nFig. 4. First, the situation is reversed with residual learn-\ning – the 34-layer ResNet is better than the 18-layer ResNet\n(by 2.8%). More importantly, the 34-layer ResNet exhibits\nconsiderably lower training error and is generalizable to the\nvalidation data. This indicates that the degradation problem\nis well addressed in this setting and we manage to obtain\naccuracy gains from increased depth.\nSecond, compared to its plain counterpart, the 34-layer\n3We have experimented with more training iterations (3 \u0002) and still ob-",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 28,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "accuracy gains from increased depth.\nSecond, compared to its plain counterpart, the 34-layer\n3We have experimented with more training iterations (3 \u0002) and still ob-\nserved the degradation problem, suggesting that this problem cannot be\nfeasibly addressed by simply using more iterations.\n5\nmodel top-1 err. top-5 err.\nVGG-16 [41] 28.07 9.33\nGoogLeNet [44] - 9.15\nPReLU-net [13] 24.27 7.38\nplain-34 28.54 10.02\nResNet-34 A 25.03 7.76\nResNet-34 B 24.52 7.46\nResNet-34 C 24.19 7.40\nResNet-50 22.85 6.71\nResNet-101 21.75 6.05\nResNet-152 21.43 5.71\nTable 3. Error rates (%, 10-crop testing) on ImageNet validation.\nVGG-16 is based on our test. ResNet-50/101/152 are of option B\nthat only uses projections for increasing dimensions.\nmethod top-1 err. top-5 err.\nVGG [41] (ILSVRC’14) - 8.43y\nGoogLeNet [44] (ILSVRC’14) - 7.89\nVGG [41] (v5) 24.4 7.1\nPReLU-net [13] 21.59 5.71\nBN-inception [16] 21.99 5.81\nResNet-34 B 21.84 5.71\nResNet-34 C 21.53 5.60\nResNet-50 20.74 5.25\nResNet-101 19.87 4.60",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 29,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "VGG [41] (v5) 24.4 7.1\nPReLU-net [13] 21.59 5.71\nBN-inception [16] 21.99 5.81\nResNet-34 B 21.84 5.71\nResNet-34 C 21.53 5.60\nResNet-50 20.74 5.25\nResNet-101 19.87 4.60\nResNet-152 19.38 4.49\nTable 4. Error rates (%) of single-model results on the ImageNet\nvalidation set (exceptyreported on the test set).\nmethod top-5 err. ( test)\nVGG [41] (ILSVRC’14) 7.32\nGoogLeNet [44] (ILSVRC’14) 6.66\nVGG [41] (v5) 6.8\nPReLU-net [13] 4.94\nBN-inception [16] 4.82\nResNet (ILSVRC’15) 3.57\nTable 5. Error rates (%) of ensembles . The top-5 error is on the\ntest set of ImageNet and reported by the test server.\nResNet reduces the top-1 error by 3.5% (Table 2), resulting\nfrom the successfully reduced training error (Fig. 4 right vs.\nleft). This comparison veriﬁes the effectiveness of residual\nlearning on extremely deep systems.\nLast, we also note that the 18-layer plain/residual nets\nare comparably accurate (Table 2), but the 18-layer ResNet\nconverges faster (Fig. 4 right vs. left). When the net is “not",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 30,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "Last, we also note that the 18-layer plain/residual nets\nare comparably accurate (Table 2), but the 18-layer ResNet\nconverges faster (Fig. 4 right vs. left). When the net is “not\noverly deep” (18 layers here), the current SGD solver is still\nable to ﬁnd good solutions to the plain net. In this case, the\nResNet eases the optimization by providing faster conver-\ngence at the early stage.\nIdentity vs. Projection Shortcuts. We have shown that\n3x3, 641x1, 64\nrelu\n1x1, 256relu\nrelu3x3, 64\n3x3, 64\nrelurelu64-d 256-dFigure 5. A deeper residual function Ffor ImageNet. Left: a\nbuilding block (on 56 \u000256 feature maps) as in Fig. 3 for ResNet-\n34. Right: a “bottleneck” building block for ResNet-50/101/152.\nparameter-free, identity shortcuts help with training. Next\nwe investigate projection shortcuts (Eqn.(2)). In Table 3 we\ncompare three options: (A) zero-padding shortcuts are used\nfor increasing dimensions, and all shortcuts are parameter-\nfree (the same as Table 2 and Fig. 4 right); (B) projec-",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 31,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "compare three options: (A) zero-padding shortcuts are used\nfor increasing dimensions, and all shortcuts are parameter-\nfree (the same as Table 2 and Fig. 4 right); (B) projec-\ntion shortcuts are used for increasing dimensions, and other\nshortcuts are identity; and (C) all shortcuts are projections.\nTable 3 shows that all three options are considerably bet-\nter than the plain counterpart. B is slightly better than A. We\nargue that this is because the zero-padded dimensions in A\nindeed have no residual learning. C is marginally better than\nB, and we attribute this to the extra parameters introduced\nby many (thirteen) projection shortcuts. But the small dif-\nferences among A/B/C indicate that projection shortcuts are\nnot essential for addressing the degradation problem. So we\ndo not use option C in the rest of this paper, to reduce mem-\nory/time complexity and model sizes. Identity shortcuts are\nparticularly important for not increasing the complexity of",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 32,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "do not use option C in the rest of this paper, to reduce mem-\nory/time complexity and model sizes. Identity shortcuts are\nparticularly important for not increasing the complexity of\nthe bottleneck architectures that are introduced below.\nDeeper Bottleneck Architectures. Next we describe our\ndeeper nets for ImageNet. Because of concerns on the train-\ning time that we can afford, we modify the building block\nas a bottleneck design4. For each residual function F, we\nuse a stack of 3 layers instead of 2 (Fig. 5). The three layers\nare 1\u00021, 3\u00023, and 1\u00021 convolutions, where the 1 \u00021 layers\nare responsible for reducing and then increasing (restoring)\ndimensions, leaving the 3 \u00023 layer a bottleneck with smaller\ninput/output dimensions. Fig. 5 shows an example, where\nboth designs have similar time complexity.\nThe parameter-free identity shortcuts are particularly im-\nportant for the bottleneck architectures. If the identity short-\ncut in Fig. 5 (right) is replaced with projection, one can",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 33,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "The parameter-free identity shortcuts are particularly im-\nportant for the bottleneck architectures. If the identity short-\ncut in Fig. 5 (right) is replaced with projection, one can\nshow that the time complexity and model size are doubled,\nas the shortcut is connected to the two high-dimensional\nends. So identity shortcuts lead to more efﬁcient models\nfor the bottleneck designs.\n50-layer ResNet: We replace each 2-layer block in the\n4Deeper non-bottleneck ResNets ( e.g., Fig. 5 left) also gain accuracy\nfrom increased depth (as shown on CIFAR-10), but are not as economical\nas the bottleneck ResNets. So the usage of bottleneck designs is mainly due\nto practical considerations. We further note that the degradation problem\nof plain nets is also witnessed for the bottleneck designs.\n6\n34-layer net with this 3-layer bottleneck block, resulting in\na 50-layer ResNet (Table 1). We use option B for increasing\ndimensions. This model has 3.8 billion FLOPs.",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 34,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "6\n34-layer net with this 3-layer bottleneck block, resulting in\na 50-layer ResNet (Table 1). We use option B for increasing\ndimensions. This model has 3.8 billion FLOPs.\n101-layer and 152-layer ResNets: We construct 101-\nlayer and 152-layer ResNets by using more 3-layer blocks\n(Table 1). Remarkably, although the depth is signiﬁcantly\nincreased, the 152-layer ResNet (11.3 billion FLOPs) still\nhaslower complexity than VGG-16/19 nets (15.3/19.6 bil-\nlion FLOPs).\nThe 50/101/152-layer ResNets are more accurate than\nthe 34-layer ones by considerable margins (Table 3 and 4).\nWe do not observe the degradation problem and thus en-\njoy signiﬁcant accuracy gains from considerably increased\ndepth. The beneﬁts of depth are witnessed for all evaluation\nmetrics (Table 3 and 4).\nComparisons with State-of-the-art Methods. In Table 4\nwe compare with the previous best single-model results.\nOur baseline 34-layer ResNets have achieved very compet-\nitive accuracy. Our 152-layer ResNet has a single-model",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 35,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "we compare with the previous best single-model results.\nOur baseline 34-layer ResNets have achieved very compet-\nitive accuracy. Our 152-layer ResNet has a single-model\ntop-5 validation error of 4.49%. This single-model result\noutperforms all previous ensemble results (Table 5). We\ncombine six models of different depth to form an ensemble\n(only with two 152-layer ones at the time of submitting).\nThis leads to 3.57% top-5 error on the test set (Table 5).\nThis entry won the 1st place in ILSVRC 2015.\n4.2. CIFAR-10 and Analysis\nWe conducted more studies on the CIFAR-10 dataset\n[20], which consists of 50k training images and 10k test-\ning images in 10 classes. We present experiments trained\non the training set and evaluated on the test set. Our focus\nis on the behaviors of extremely deep networks, but not on\npushing the state-of-the-art results, so we intentionally use\nsimple architectures as follows.\nThe plain/residual architectures follow the form in Fig. 3",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 36,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "pushing the state-of-the-art results, so we intentionally use\nsimple architectures as follows.\nThe plain/residual architectures follow the form in Fig. 3\n(middle/right). The network inputs are 32 \u000232 images, with\nthe per-pixel mean subtracted. The ﬁrst layer is 3 \u00023 convo-\nlutions. Then we use a stack of 6nlayers with 3\u00023 convo-\nlutions on the feature maps of sizes f32;16;8grespectively,\nwith 2nlayers for each feature map size. The numbers of\nﬁlters aref16;32;64grespectively. The subsampling is per-\nformed by convolutions with a stride of 2. The network ends\nwith a global average pooling, a 10-way fully-connected\nlayer, and softmax. There are totally 6 n+2 stacked weighted\nlayers. The following table summarizes the architecture:\noutput map size 32\u000232 16\u000216 8\u00028\n# layers 1+2n 2n 2n\n# ﬁlters 16 32 64\nWhen shortcut connections are used, they are connected\nto the pairs of 3\u00023 layers (totally 3nshortcuts). On this",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 37,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "output map size 32\u000232 16\u000216 8\u00028\n# layers 1+2n 2n 2n\n# ﬁlters 16 32 64\nWhen shortcut connections are used, they are connected\nto the pairs of 3\u00023 layers (totally 3nshortcuts). On this\ndataset we use identity shortcuts in all cases ( i.e., option A),method error (%)\nMaxout [10] 9.38\nNIN [25] 8.81\nDSN [24] 8.22\n# layers # params\nFitNet [35] 19 2.5M 8.39\nHighway [42, 43] 19 2.3M 7.54 (7.72\u00060.16)\nHighway [42, 43] 32 1.25M 8.80\nResNet 20 0.27M 8.75\nResNet 32 0.46M 7.51\nResNet 44 0.66M 7.17\nResNet 56 0.85M 6.97\nResNet 110 1.7M 6.43 (6.61\u00060.16)\nResNet 1202 19.4M 7.93\nTable 6. Classiﬁcation error on the CIFAR-10 test set. All meth-\nods are with data augmentation. For ResNet-110, we run it 5 times\nand show “best (mean \u0006std)” as in [43].\nso our residual models have exactly the same depth, width,\nand number of parameters as the plain counterparts.\nWe use a weight decay of 0.0001 and momentum of 0.9,\nand adopt the weight initialization in [13] and BN [16] but",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 38,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "and number of parameters as the plain counterparts.\nWe use a weight decay of 0.0001 and momentum of 0.9,\nand adopt the weight initialization in [13] and BN [16] but\nwith no dropout. These models are trained with a mini-\nbatch size of 128 on two GPUs. We start with a learning\nrate of 0.1, divide it by 10 at 32k and 48k iterations, and\nterminate training at 64k iterations, which is determined on\na 45k/5k train/val split. We follow the simple data augmen-\ntation in [24] for training: 4 pixels are padded on each side,\nand a 32\u000232 crop is randomly sampled from the padded\nimage or its horizontal ﬂip. For testing, we only evaluate\nthe single view of the original 32 \u000232 image.\nWe compare n=f3;5;7;9g, leading to 20, 32, 44, and\n56-layer networks. Fig. 6 (left) shows the behaviors of the\nplain nets. The deep plain nets suffer from increased depth,\nand exhibit higher training error when going deeper. This\nphenomenon is similar to that on ImageNet (Fig. 4, left) and",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 39,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "plain nets. The deep plain nets suffer from increased depth,\nand exhibit higher training error when going deeper. This\nphenomenon is similar to that on ImageNet (Fig. 4, left) and\non MNIST (see [42]), suggesting that such an optimization\ndifﬁculty is a fundamental problem.\nFig. 6 (middle) shows the behaviors of ResNets. Also\nsimilar to the ImageNet cases (Fig. 4, right), our ResNets\nmanage to overcome the optimization difﬁculty and demon-\nstrate accuracy gains when the depth increases.\nWe further explore n= 18 that leads to a 110-layer\nResNet. In this case, we ﬁnd that the initial learning rate\nof 0.1 is slightly too large to start converging5. So we use\n0.01 to warm up the training until the training error is below\n80% (about 400 iterations), and then go back to 0.1 and con-\ntinue training. The rest of the learning schedule is as done\npreviously. This 110-layer network converges well (Fig. 6,\nmiddle). It has fewer parameters than other deep and thin",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 40,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "tinue training. The rest of the learning schedule is as done\npreviously. This 110-layer network converges well (Fig. 6,\nmiddle). It has fewer parameters than other deep and thin\n5With an initial learning rate of 0.1, it starts converging ( <90% error)\nafter several epochs, but still reaches similar accuracy.\n7\n0 1 2 3 4 5 6051020\niter. (1e4)error (%)\n  \nplain-20\nplain-32\nplain-44\nplain-56\n0 1 2 3 4 5 6051020\niter. (1e4)error (%)\n  \nResNet-20\nResNet-32\nResNet-44\nResNet-56\nResNet-110 56-layer\n20-layer\n110-layer20-layer\n4 5 60151020\niter. (1e4)error (%)\n  \nresidual-110\nresidual-1202Figure 6. Training on CIFAR-10 . Dashed lines denote training error, and bold lines denote testing error. Left: plain networks. The error\nof plain-110 is higher than 60% and not displayed. Middle : ResNets. Right : ResNets with 110 and 1202 layers.\n0 20 40 60 80 100123\nlayer index (sorted by magnitude)std\n  \nplain-20\nplain-56\nResNet-20\nResNet-56\nResNet-1100 20 40 60 80 100123\nlayer index (original)std",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 41,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "0 20 40 60 80 100123\nlayer index (sorted by magnitude)std\n  \nplain-20\nplain-56\nResNet-20\nResNet-56\nResNet-1100 20 40 60 80 100123\nlayer index (original)std\n  \nplain-20\nplain-56\nResNet-20\nResNet-56\nResNet-110\nFigure 7. Standard deviations (std) of layer responses on CIFAR-\n10. The responses are the outputs of each 3 \u00023 layer, after BN and\nbefore nonlinearity. Top: the layers are shown in their original\norder. Bottom : the responses are ranked in descending order.\nnetworks such as FitNet [35] and Highway [42] (Table 6),\nyet is among the state-of-the-art results (6.43%, Table 6).\nAnalysis of Layer Responses. Fig. 7 shows the standard\ndeviations (std) of the layer responses. The responses are\nthe outputs of each 3 \u00023 layer, after BN and before other\nnonlinearity (ReLU/addition). For ResNets, this analy-\nsis reveals the response strength of the residual functions.\nFig. 7 shows that ResNets have generally smaller responses\nthan their plain counterparts. These results support our ba-",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 42,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "sis reveals the response strength of the residual functions.\nFig. 7 shows that ResNets have generally smaller responses\nthan their plain counterparts. These results support our ba-\nsic motivation (Sec.3.1) that the residual functions might\nbe generally closer to zero than the non-residual functions.\nWe also notice that the deeper ResNet has smaller magni-\ntudes of responses, as evidenced by the comparisons among\nResNet-20, 56, and 110 in Fig. 7. When there are more\nlayers, an individual layer of ResNets tends to modify the\nsignal less.\nExploring Over 1000 layers. We explore an aggressively\ndeep model of over 1000 layers. We set n= 200 that\nleads to a 1202-layer network, which is trained as described\nabove. Our method shows no optimization difﬁculty , and\nthis103-layer network is able to achieve training error\n<0.1% (Fig. 6, right). Its test error is still fairly good\n(7.93%, Table 6).\nBut there are still open problems on such aggressively",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 43,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "this103-layer network is able to achieve training error\n<0.1% (Fig. 6, right). Its test error is still fairly good\n(7.93%, Table 6).\nBut there are still open problems on such aggressively\ndeep models. The testing result of this 1202-layer network\nis worse than that of our 110-layer network, although bothtraining data 07+12 07++12\ntest data VOC 07 test VOC 12 test\nVGG-16 73.2 70.4\nResNet-101 76.4 73.8\nTable 7. Object detection mAP (%) on the PASCAL VOC\n2007/2012 test sets using baseline Faster R-CNN. See also Ta-\nble 10 and 11 for better results.\nmetric mAP@.5 mAP@[.5, .95]\nVGG-16 41.5 21.2\nResNet-101 48.4 27.2\nTable 8. Object detection mAP (%) on the COCO validation set\nusing baseline Faster R-CNN. See also Table 9 for better results.\nhave similar training error. We argue that this is because of\noverﬁtting. The 1202-layer network may be unnecessarily\nlarge (19.4M) for this small dataset. Strong regularization\nsuch as maxout [10] or dropout [14] is applied to obtain the",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 44,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "overﬁtting. The 1202-layer network may be unnecessarily\nlarge (19.4M) for this small dataset. Strong regularization\nsuch as maxout [10] or dropout [14] is applied to obtain the\nbest results ([10, 25, 24, 35]) on this dataset. In this paper,\nwe use no maxout/dropout and just simply impose regular-\nization via deep and thin architectures by design, without\ndistracting from the focus on the difﬁculties of optimiza-\ntion. But combining with stronger regularization may im-\nprove results, which we will study in the future.\n4.3. Object Detection on PASCAL and MS COCO\nOur method has good generalization performance on\nother recognition tasks. Table 7 and 8 show the object de-\ntection baseline results on PASCAL VOC 2007 and 2012\n[5] and COCO [26]. We adopt Faster R-CNN [32] as the de-\ntection method. Here we are interested in the improvements\nof replacing VGG-16 [41] with ResNet-101. The detection\nimplementation (see appendix) of using both models is the",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 45,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "tection method. Here we are interested in the improvements\nof replacing VGG-16 [41] with ResNet-101. The detection\nimplementation (see appendix) of using both models is the\nsame, so the gains can only be attributed to better networks.\nMost remarkably, on the challenging COCO dataset we ob-\ntain a 6.0% increase in COCO’s standard metric (mAP@[.5,\n.95]), which is a 28% relative improvement. This gain is\nsolely due to the learned representations.\nBased on deep residual nets, we won the 1st places in\nseveral tracks in ILSVRC & COCO 2015 competitions: Im-\nageNet detection, ImageNet localization, COCO detection,\nand COCO segmentation. The details are in the appendix.\n8\nReferences\n[1] Y . Bengio, P. Simard, and P. Frasconi. Learning long-term dependen-\ncies with gradient descent is difﬁcult. IEEE Transactions on Neural\nNetworks , 5(2):157–166, 1994.\n[2] C. M. Bishop. Neural networks for pattern recognition . Oxford\nuniversity press, 1995.",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 46,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "cies with gradient descent is difﬁcult. IEEE Transactions on Neural\nNetworks , 5(2):157–166, 1994.\n[2] C. M. Bishop. Neural networks for pattern recognition . Oxford\nuniversity press, 1995.\n[3] W. L. Briggs, S. F. McCormick, et al. A Multigrid Tutorial . Siam,\n2000.\n[4] K. Chatﬁeld, V . Lempitsky, A. Vedaldi, and A. Zisserman. The devil\nis in the details: an evaluation of recent feature encoding methods.\nInBMVC , 2011.\n[5] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and A. Zis-\nserman. The Pascal Visual Object Classes (VOC) Challenge. IJCV ,\npages 303–338, 2010.\n[6] S. Gidaris and N. Komodakis. Object detection via a multi-region &\nsemantic segmentation-aware cnn model. In ICCV , 2015.\n[7] R. Girshick. Fast R-CNN. In ICCV , 2015.\n[8] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich feature hier-\narchies for accurate object detection and semantic segmentation. In\nCVPR , 2014.\n[9] X. Glorot and Y . Bengio. Understanding the difﬁculty of training",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 47,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "archies for accurate object detection and semantic segmentation. In\nCVPR , 2014.\n[9] X. Glorot and Y . Bengio. Understanding the difﬁculty of training\ndeep feedforward neural networks. In AISTATS , 2010.\n[10] I. J. Goodfellow, D. Warde-Farley, M. Mirza, A. Courville, and\nY . Bengio. Maxout networks. arXiv:1302.4389 , 2013.\n[11] K. He and J. Sun. Convolutional neural networks at constrained time\ncost. In CVPR , 2015.\n[12] K. He, X. Zhang, S. Ren, and J. Sun. Spatial pyramid pooling in deep\nconvolutional networks for visual recognition. In ECCV , 2014.\n[13] K. He, X. Zhang, S. Ren, and J. Sun. Delving deep into rectiﬁers:\nSurpassing human-level performance on imagenet classiﬁcation. In\nICCV , 2015.\n[14] G. E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and\nR. R. Salakhutdinov. Improving neural networks by preventing co-\nadaptation of feature detectors. arXiv:1207.0580 , 2012.\n[15] S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 48,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "R. R. Salakhutdinov. Improving neural networks by preventing co-\nadaptation of feature detectors. arXiv:1207.0580 , 2012.\n[15] S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural\ncomputation , 9(8):1735–1780, 1997.\n[16] S. Ioffe and C. Szegedy. Batch normalization: Accelerating deep\nnetwork training by reducing internal covariate shift. In ICML , 2015.\n[17] H. Jegou, M. Douze, and C. Schmid. Product quantization for nearest\nneighbor search. TPAMI , 33, 2011.\n[18] H. Jegou, F. Perronnin, M. Douze, J. Sanchez, P. Perez, and\nC. Schmid. Aggregating local image descriptors into compact codes.\nTPAMI , 2012.\n[19] Y . Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Girshick,\nS. Guadarrama, and T. Darrell. Caffe: Convolutional architecture for\nfast feature embedding. arXiv:1408.5093 , 2014.\n[20] A. Krizhevsky. Learning multiple layers of features from tiny im-\nages. Tech Report , 2009.\n[21] A. Krizhevsky, I. Sutskever, and G. Hinton. Imagenet classiﬁcation",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 49,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "[20] A. Krizhevsky. Learning multiple layers of features from tiny im-\nages. Tech Report , 2009.\n[21] A. Krizhevsky, I. Sutskever, and G. Hinton. Imagenet classiﬁcation\nwith deep convolutional neural networks. In NIPS , 2012.\n[22] Y . LeCun, B. Boser, J. S. Denker, D. Henderson, R. E. Howard,\nW. Hubbard, and L. D. Jackel. Backpropagation applied to hand-\nwritten zip code recognition. Neural computation , 1989.\n[23] Y . LeCun, L. Bottou, G. B. Orr, and K.-R. M ¨uller. Efﬁcient backprop.\nInNeural Networks: Tricks of the Trade , pages 9–50. Springer, 1998.\n[24] C.-Y . Lee, S. Xie, P. Gallagher, Z. Zhang, and Z. Tu. Deeply-\nsupervised nets. arXiv:1409.5185 , 2014.\n[25] M. Lin, Q. Chen, and S. Yan. Network in network. arXiv:1312.4400 ,\n2013.\n[26] T.-Y . Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ramanan,\nP. Doll ´ar, and C. L. Zitnick. Microsoft COCO: Common objects in\ncontext. In ECCV . 2014.\n[27] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional networks",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 50,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "P. Doll ´ar, and C. L. Zitnick. Microsoft COCO: Common objects in\ncontext. In ECCV . 2014.\n[27] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional networks\nfor semantic segmentation. In CVPR , 2015.[28] G. Mont ´ufar, R. Pascanu, K. Cho, and Y . Bengio. On the number of\nlinear regions of deep neural networks. In NIPS , 2014.\n[29] V . Nair and G. E. Hinton. Rectiﬁed linear units improve restricted\nboltzmann machines. In ICML , 2010.\n[30] F. Perronnin and C. Dance. Fisher kernels on visual vocabularies for\nimage categorization. In CVPR , 2007.\n[31] T. Raiko, H. Valpola, and Y . LeCun. Deep learning made easier by\nlinear transformations in perceptrons. In AISTATS , 2012.\n[32] S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: Towards\nreal-time object detection with region proposal networks. In NIPS ,\n2015.\n[33] S. Ren, K. He, R. Girshick, X. Zhang, and J. Sun. Object detection\nnetworks on convolutional feature maps. arXiv:1504.06066 , 2015.",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 51,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "2015.\n[33] S. Ren, K. He, R. Girshick, X. Zhang, and J. Sun. Object detection\nnetworks on convolutional feature maps. arXiv:1504.06066 , 2015.\n[34] B. D. Ripley. Pattern recognition and neural networks . Cambridge\nuniversity press, 1996.\n[35] A. Romero, N. Ballas, S. E. Kahou, A. Chassang, C. Gatta, and\nY . Bengio. Fitnets: Hints for thin deep nets. In ICLR , 2015.\n[36] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma,\nZ. Huang, A. Karpathy, A. Khosla, M. Bernstein, et al. Imagenet\nlarge scale visual recognition challenge. arXiv:1409.0575 , 2014.\n[37] A. M. Saxe, J. L. McClelland, and S. Ganguli. Exact solutions to\nthe nonlinear dynamics of learning in deep linear neural networks.\narXiv:1312.6120 , 2013.\n[38] N. N. Schraudolph. Accelerated gradient descent by factor-centering\ndecomposition. Technical report, 1998.\n[39] N. N. Schraudolph. Centering neural network gradient factors. In\nNeural Networks: Tricks of the Trade , pages 207–226. Springer,\n1998.",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 52,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "decomposition. Technical report, 1998.\n[39] N. N. Schraudolph. Centering neural network gradient factors. In\nNeural Networks: Tricks of the Trade , pages 207–226. Springer,\n1998.\n[40] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus, and Y . Le-\nCun. Overfeat: Integrated recognition, localization and detection\nusing convolutional networks. In ICLR , 2014.\n[41] K. Simonyan and A. Zisserman. Very deep convolutional networks\nfor large-scale image recognition. In ICLR , 2015.\n[42] R. K. Srivastava, K. Greff, and J. Schmidhuber. Highway networks.\narXiv:1505.00387 , 2015.\n[43] R. K. Srivastava, K. Greff, and J. Schmidhuber. Training very deep\nnetworks. 1507.06228 , 2015.\n[44] C. Szegedy, W. Liu, Y . Jia, P. Sermanet, S. Reed, D. Anguelov, D. Er-\nhan, V . Vanhoucke, and A. Rabinovich. Going deeper with convolu-\ntions. In CVPR , 2015.\n[45] R. Szeliski. Fast surface interpolation using hierarchical basis func-\ntions. TPAMI , 1990.",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 53,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "han, V . Vanhoucke, and A. Rabinovich. Going deeper with convolu-\ntions. In CVPR , 2015.\n[45] R. Szeliski. Fast surface interpolation using hierarchical basis func-\ntions. TPAMI , 1990.\n[46] R. Szeliski. Locally adapted hierarchical basis preconditioning. In\nSIGGRAPH , 2006.\n[47] T. Vatanen, T. Raiko, H. Valpola, and Y . LeCun. Pushing stochas-\ntic gradient towards second-order methods–backpropagation learn-\ning with transformations in nonlinearities. In Neural Information\nProcessing , 2013.\n[48] A. Vedaldi and B. Fulkerson. VLFeat: An open and portable library\nof computer vision algorithms, 2008.\n[49] W. Venables and B. Ripley. Modern applied statistics with s-plus.\n1999.\n[50] M. D. Zeiler and R. Fergus. Visualizing and understanding convolu-\ntional neural networks. In ECCV , 2014.\n9\nA. Object Detection Baselines\nIn this section we introduce our detection method based\non the baseline Faster R-CNN [32] system. The models are\ninitialized by the ImageNet classiﬁcation models, and then",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 54,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "In this section we introduce our detection method based\non the baseline Faster R-CNN [32] system. The models are\ninitialized by the ImageNet classiﬁcation models, and then\nﬁne-tuned on the object detection data. We have experi-\nmented with ResNet-50/101 at the time of the ILSVRC &\nCOCO 2015 detection competitions.\nUnlike VGG-16 used in [32], our ResNet has no hidden\nfc layers. We adopt the idea of “Networks on Conv fea-\nture maps” (NoC) [33] to address this issue. We compute\nthe full-image shared conv feature maps using those lay-\ners whose strides on the image are no greater than 16 pixels\n(i.e., conv1, conv2 x, conv3 x, and conv4 x, totally 91 conv\nlayers in ResNet-101; Table 1). We consider these layers as\nanalogous to the 13 conv layers in VGG-16, and by doing\nso, both ResNet and VGG-16 have conv feature maps of the\nsame total stride (16 pixels). These layers are shared by a\nregion proposal network (RPN, generating 300 proposals)",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 55,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "so, both ResNet and VGG-16 have conv feature maps of the\nsame total stride (16 pixels). These layers are shared by a\nregion proposal network (RPN, generating 300 proposals)\n[32] and a Fast R-CNN detection network [7]. RoI pool-\ning [7] is performed before conv5 1. On this RoI-pooled\nfeature, all layers of conv5 x and up are adopted for each\nregion, playing the roles of VGG-16’s fc layers. The ﬁnal\nclassiﬁcation layer is replaced by two sibling layers (classi-\nﬁcation and box regression [7]).\nFor the usage of BN layers, after pre-training, we com-\npute the BN statistics (means and variances) for each layer\non the ImageNet training set. Then the BN layers are ﬁxed\nduring ﬁne-tuning for object detection. As such, the BN\nlayers become linear activations with constant offsets and\nscales, and BN statistics are not updated by ﬁne-tuning. We\nﬁx the BN layers mainly for reducing memory consumption\nin Faster R-CNN training.\nPASCAL VOC\nFollowing [7, 32], for the PASCAL VOC 2007 testset,",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 56,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "ﬁx the BN layers mainly for reducing memory consumption\nin Faster R-CNN training.\nPASCAL VOC\nFollowing [7, 32], for the PASCAL VOC 2007 testset,\nwe use the 5k trainval images in VOC 2007 and 16k train-\nvalimages in VOC 2012 for training (“07+12”). For the\nPASCAL VOC 2012 testset, we use the 10k trainval +test\nimages in VOC 2007 and 16k trainval images in VOC 2012\nfor training (“07++12”). The hyper-parameters for train-\ning Faster R-CNN are the same as in [32]. Table 7 shows\nthe results. ResNet-101 improves the mAP by >3% over\nVGG-16. This gain is solely because of the improved fea-\ntures learned by ResNet.\nMS COCO\nThe MS COCO dataset [26] involves 80 object cate-\ngories. We evaluate the PASCAL VOC metric (mAP @\nIoU = 0.5) and the standard COCO metric (mAP @ IoU =\n.5:.05:.95). We use the 80k images on the train set for train-\ning and the 40k images on the val set for evaluation. Our\ndetection system for COCO is similar to that for PASCAL",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 57,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": ".5:.05:.95). We use the 80k images on the train set for train-\ning and the 40k images on the val set for evaluation. Our\ndetection system for COCO is similar to that for PASCAL\nVOC. We train the COCO models with an 8-GPU imple-\nmentation, and thus the RPN step has a mini-batch size of8 images ( i.e., 1 per GPU) and the Fast R-CNN step has a\nmini-batch size of 16 images. The RPN step and Fast R-\nCNN step are both trained for 240k iterations with a learn-\ning rate of 0.001 and then for 80k iterations with 0.0001.\nTable 8 shows the results on the MS COCO validation\nset. ResNet-101 has a 6% increase of mAP@[.5, .95] over\nVGG-16, which is a 28% relative improvement, solely con-\ntributed by the features learned by the better network. Re-\nmarkably, the mAP@[.5, .95]’s absolute increase (6.0%) is\nnearly as big as mAP@.5’s (6.9%). This suggests that a\ndeeper network can improve both recognition and localiza-\ntion.\nB. Object Detection Improvements",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 58,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "nearly as big as mAP@.5’s (6.9%). This suggests that a\ndeeper network can improve both recognition and localiza-\ntion.\nB. Object Detection Improvements\nFor completeness, we report the improvements made for\nthe competitions. These improvements are based on deep\nfeatures and thus should beneﬁt from residual learning.\nMS COCO\nBox reﬁnement. Our box reﬁnement partially follows the it-\nerative localization in [6]. In Faster R-CNN, the ﬁnal output\nis a regressed box that is different from its proposal box. So\nfor inference, we pool a new feature from the regressed box\nand obtain a new classiﬁcation score and a new regressed\nbox. We combine these 300 new predictions with the orig-\ninal 300 predictions. Non-maximum suppression (NMS) is\napplied on the union set of predicted boxes using an IoU\nthreshold of 0.3 [8], followed by box voting [6]. Box re-\nﬁnement improves mAP by about 2 points (Table 9).\nGlobal context. We combine global context in the Fast",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 59,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "threshold of 0.3 [8], followed by box voting [6]. Box re-\nﬁnement improves mAP by about 2 points (Table 9).\nGlobal context. We combine global context in the Fast\nR-CNN step. Given the full-image conv feature map, we\npool a feature by global Spatial Pyramid Pooling [12] (with\na “single-level” pyramid) which can be implemented as\n“RoI” pooling using the entire image’s bounding box as the\nRoI. This pooled feature is fed into the post-RoI layers to\nobtain a global context feature. This global feature is con-\ncatenated with the original per-region feature, followed by\nthe sibling classiﬁcation and box regression layers. This\nnew structure is trained end-to-end. Global context im-\nproves mAP@.5 by about 1 point (Table 9).\nMulti-scale testing. In the above, all results are obtained by\nsingle-scale training/testing as in [32], where the image’s\nshorter side is s= 600 pixels. Multi-scale training/testing\nhas been developed in [12, 7] by selecting a scale from a",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 60,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "single-scale training/testing as in [32], where the image’s\nshorter side is s= 600 pixels. Multi-scale training/testing\nhas been developed in [12, 7] by selecting a scale from a\nfeature pyramid, and in [33] by using maxout layers. In\nour current implementation, we have performed multi-scale\ntesting following [33]; we have not performed multi-scale\ntraining because of limited time. In addition, we have per-\nformed multi-scale testing only for the Fast R-CNN step\n(but not yet for the RPN step). With a trained model, we\ncompute conv feature maps on an image pyramid, where the\nimage’s shorter sides are s2f200;400;600;800;1000g.\n10\ntraining data COCO train COCO trainval\ntest data COCO val COCO test-dev\nmAP @.5 @[.5, .95] @.5 @[.5, .95]\nbaseline Faster R-CNN (VGG-16) 41.5 21.2\nbaseline Faster R-CNN (ResNet-101) 48.4 27.2\n+box reﬁnement 49.9 29.9\n+context 51.1 30.0 53.3 32.2\n+multi-scale testing 53.8 32.5 55.7 34.9\nensemble 59.0 37.4",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 61,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "baseline Faster R-CNN (VGG-16) 41.5 21.2\nbaseline Faster R-CNN (ResNet-101) 48.4 27.2\n+box reﬁnement 49.9 29.9\n+context 51.1 30.0 53.3 32.2\n+multi-scale testing 53.8 32.5 55.7 34.9\nensemble 59.0 37.4\nTable 9. Object detection improvements on MS COCO using Faster R-CNN and ResNet-101.\nsystem net data mAP areo bike bird boat bottle bus car cat chair cow table dog horse mbike person plant sheep sofa train tv\nbaseline VGG-16 07+12 73.2 76.5 79.0 70.9 65.5 52.1 83.1 84.7 86.4 52.0 81.9 65.7 84.8 84.6 77.5 76.7 38.8 73.6 73.9 83.0 72.6\nbaseline ResNet-101 07+12 76.4 79.8 80.7 76.2 68.3 55.9 85.1 85.3 89.8 56.7 87.8 69.4 88.3 88.9 80.9 78.4 41.7 78.6 79.8 85.3 72.0\nbaseline+++ ResNet-101 COCO+07+12 85.6 90.0 89.6 87.8 80.8 76.1 89.9 89.9 89.6 75.5 90.0 80.7 89.6 90.3 89.1 88.7 65.4 88.1 85.6 89.0 86.8\nTable 10. Detection results on the PASCAL VOC 2007 test set. The baseline is the Faster R-CNN system. The system “baseline+++”",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 62,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "Table 10. Detection results on the PASCAL VOC 2007 test set. The baseline is the Faster R-CNN system. The system “baseline+++”\ninclude box reﬁnement, context, and multi-scale testing in Table 9.\nsystem net data mAP areo bike bird boat bottle bus car cat chair cow table dog horse mbike person plant sheep sofa train tv\nbaseline VGG-16 07++12 70.4 84.9 79.8 74.3 53.9 49.8 77.5 75.9 88.5 45.6 77.1 55.3 86.9 81.7 80.9 79.6 40.1 72.6 60.9 81.2 61.5\nbaseline ResNet-101 07++12 73.8 86.5 81.6 77.2 58.0 51.0 78.6 76.6 93.2 48.6 80.4 59.0 92.1 85.3 84.8 80.7 48.1 77.3 66.5 84.7 65.6\nbaseline+++ ResNet-101 COCO+07++12 83.8 92.1 88.4 84.8 75.9 71.4 86.3 87.8 94.2 66.8 89.4 69.2 93.9 91.9 90.9 89.6 67.9 88.2 76.8 90.3 80.0\nTable 11. Detection results on the PASCAL VOC 2012 test set ( http://host.robots.ox.ac.uk:8080/leaderboard/\ndisplaylb.php?challengeid=11&compid=4 ). The baseline is the Faster R-CNN system. The system “baseline+++” include",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 63,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "displaylb.php?challengeid=11&compid=4 ). The baseline is the Faster R-CNN system. The system “baseline+++” include\nbox reﬁnement, context, and multi-scale testing in Table 9.\nWe select two adjacent scales from the pyramid following\n[33]. RoI pooling and subsequent layers are performed on\nthe feature maps of these two scales [33], which are merged\nby maxout as in [33]. Multi-scale testing improves the mAP\nby over 2 points (Table 9).\nUsing validation data. Next we use the 80k+40k trainval set\nfor training and the 20k test-dev set for evaluation. The test-\ndev set has no publicly available ground truth and the result\nis reported by the evaluation server. Under this setting, the\nresults are an mAP@.5 of 55.7% and an mAP@[.5, .95] of\n34.9% (Table 9). This is our single-model result.\nEnsemble. In Faster R-CNN, the system is designed to learn\nregion proposals and also object classiﬁers, so an ensemble\ncan be used to boost both tasks. We use an ensemble for",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 64,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "Ensemble. In Faster R-CNN, the system is designed to learn\nregion proposals and also object classiﬁers, so an ensemble\ncan be used to boost both tasks. We use an ensemble for\nproposing regions, and the union set of proposals are pro-\ncessed by an ensemble of per-region classiﬁers. Table 9\nshows our result based on an ensemble of 3 networks. The\nmAP is 59.0% and 37.4% on the test-dev set. This result\nwon the 1st place in the detection task in COCO 2015.\nPASCAL VOC\nWe revisit the PASCAL VOC dataset based on the above\nmodel. With the single model on the COCO dataset (55.7%\nmAP@.5 in Table 9), we ﬁne-tune this model on the PAS-\nCAL VOC sets. The improvements of box reﬁnement, con-\ntext, and multi-scale testing are also adopted. By doing soval2 test\nGoogLeNet [44] (ILSVRC’14) - 43.9\nour single model (ILSVRC’15) 60.5 58.8\nour ensemble (ILSVRC’15) 63.6 62.1\nTable 12. Our results (mAP, %) on the ImageNet detection dataset.\nOur detection system is Faster R-CNN [32] with the improvements",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 65,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "our ensemble (ILSVRC’15) 63.6 62.1\nTable 12. Our results (mAP, %) on the ImageNet detection dataset.\nOur detection system is Faster R-CNN [32] with the improvements\nin Table 9, using ResNet-101.\nwe achieve 85.6% mAP on PASCAL VOC 2007 (Table 10)\nand 83.8% on PASCAL VOC 2012 (Table 11)6. The result\non PASCAL VOC 2012 is 10 points higher than the previ-\nous state-of-the-art result [6].\nImageNet Detection\nThe ImageNet Detection (DET) task involves 200 object\ncategories. The accuracy is evaluated by mAP@.5. Our\nobject detection algorithm for ImageNet DET is the same\nas that for MS COCO in Table 9. The networks are pre-\ntrained on the 1000-class ImageNet classiﬁcation set, and\nare ﬁne-tuned on the DET data. We split the validation set\ninto two parts (val1/val2) following [8]. We ﬁne-tune the\ndetection models using the DET training set and the val1\nset. The val2 set is used for validation. We do not use other\nILSVRC 2015 data. Our single model with ResNet-101 has",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 66,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "detection models using the DET training set and the val1\nset. The val2 set is used for validation. We do not use other\nILSVRC 2015 data. Our single model with ResNet-101 has\n6http://host.robots.ox.ac.uk:8080/anonymous/3OJ4OJ.html ,\nsubmitted on 2015-11-26.\n11\nLOC\nmethodLOC\nnetworktestingLOC error\non GT CLSclassiﬁcation\nnetworktop-5 LOC error\non predicted CLS\nVGG’s [41] VGG-16 1-crop 33.1 [41]\nRPN ResNet-101 1-crop 13.3\nRPN ResNet-101 dense 11.7\nRPN ResNet-101 dense ResNet-101 14.4\nRPN+RCNN ResNet-101 dense ResNet-101 10.6\nRPN+RCNN ensemble dense ensemble 8.9\nTable 13. Localization error (%) on the ImageNet validation. In\nthe column of “LOC error on GT class” ([41]), the ground truth\nclass is used. In the “testing” column, “1-crop” denotes testing\non a center crop of 224 \u0002224 pixels, “dense” denotes dense (fully\nconvolutional) and multi-scale testing.\n58.8% mAP and our ensemble of 3 models has 62.1% mAP\non the DET test set (Table 12). This result won the 1st place",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 67,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "convolutional) and multi-scale testing.\n58.8% mAP and our ensemble of 3 models has 62.1% mAP\non the DET test set (Table 12). This result won the 1st place\nin the ImageNet detection task in ILSVRC 2015 , surpassing\nthe second place by 8.5 points (absolute).\nC. ImageNet Localization\nThe ImageNet Localization (LOC) task [36] requires to\nclassify and localize the objects. Following [40, 41], we\nassume that the image-level classiﬁers are ﬁrst adopted for\npredicting the class labels of an image, and the localiza-\ntion algorithm only accounts for predicting bounding boxes\nbased on the predicted classes. We adopt the “per-class re-\ngression” (PCR) strategy [40, 41], learning a bounding box\nregressor for each class. We pre-train the networks for Im-\nageNet classiﬁcation and then ﬁne-tune them for localiza-\ntion. We train networks on the provided 1000-class Ima-\ngeNet training set.\nOur localization algorithm is based on the RPN frame-\nwork of [32] with a few modiﬁcations. Unlike the way in",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 68,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "tion. We train networks on the provided 1000-class Ima-\ngeNet training set.\nOur localization algorithm is based on the RPN frame-\nwork of [32] with a few modiﬁcations. Unlike the way in\n[32] that is category-agnostic, our RPN for localization is\ndesigned in a per-class form. This RPN ends with two sib-\nling 1\u00021 convolutional layers for binary classiﬁcation ( cls)\nand box regression ( reg), as in [32]. The clsandreglayers\nare both in a per-class from, in contrast to [32]. Speciﬁ-\ncally, the clslayer has a 1000-d output, and each dimension\nisbinary logistic regression for predicting being or not be-\ning an object class; the reglayer has a 1000\u00024-d output\nconsisting of box regressors for 1000 classes. As in [32],\nour bounding box regression is with reference to multiple\ntranslation-invariant “anchor” boxes at each position.\nAs in our ImageNet classiﬁcation training (Sec. 3.4), we\nrandomly sample 224 \u0002224 crops for data augmentation.",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 69,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "translation-invariant “anchor” boxes at each position.\nAs in our ImageNet classiﬁcation training (Sec. 3.4), we\nrandomly sample 224 \u0002224 crops for data augmentation.\nWe use a mini-batch size of 256 images for ﬁne-tuning. To\navoid negative samples being dominate, 8 anchors are ran-\ndomly sampled for each image, where the sampled positive\nand negative anchors have a ratio of 1:1 [32]. For testing,\nthe network is applied on the image fully-convolutionally.\nTable 13 compares the localization results. Following\n[41], we ﬁrst perform “oracle” testing using the ground truth\nclass as the classiﬁcation prediction. VGG’s paper [41] re-methodtop-5 localization err\nval test\nOverFeat [40] (ILSVRC’13) 30.0 29.9\nGoogLeNet [44] (ILSVRC’14) - 26.7\nVGG [41] (ILSVRC’14) 26.9 25.3\nours (ILSVRC’15) 8.9 9.0\nTable 14. Comparisons of localization error (%) on the ImageNet\ndataset with state-of-the-art methods.\nports a center-crop error of 33.1% (Table 13) using ground",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 70,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "ours (ILSVRC’15) 8.9 9.0\nTable 14. Comparisons of localization error (%) on the ImageNet\ndataset with state-of-the-art methods.\nports a center-crop error of 33.1% (Table 13) using ground\ntruth classes. Under the same setting, our RPN method us-\ning ResNet-101 net signiﬁcantly reduces the center-crop er-\nror to 13.3%. This comparison demonstrates the excellent\nperformance of our framework. With dense (fully convolu-\ntional) and multi-scale testing, our ResNet-101 has an error\nof 11.7% using ground truth classes. Using ResNet-101 for\npredicting classes (4.6% top-5 classiﬁcation error, Table 4),\nthe top-5 localization error is 14.4%.\nThe above results are only based on the proposal network\n(RPN) in Faster R-CNN [32]. One may use the detection\nnetwork (Fast R-CNN [7]) in Faster R-CNN to improve the\nresults. But we notice that on this dataset, one image usually\ncontains a single dominate object, and the proposal regions\nhighly overlap with each other and thus have very similar",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 71,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "results. But we notice that on this dataset, one image usually\ncontains a single dominate object, and the proposal regions\nhighly overlap with each other and thus have very similar\nRoI-pooled features. As a result, the image-centric training\nof Fast R-CNN [7] generates samples of small variations,\nwhich may not be desired for stochastic training. Motivated\nby this, in our current experiment we use the original R-\nCNN [8] that is RoI-centric, in place of Fast R-CNN.\nOur R-CNN implementation is as follows. We apply the\nper-class RPN trained as above on the training images to\npredict bounding boxes for the ground truth class. These\npredicted boxes play a role of class-dependent proposals.\nFor each training image, the highest scored 200 proposals\nare extracted as training samples to train an R-CNN classi-\nﬁer. The image region is cropped from a proposal, warped\nto 224\u0002224 pixels, and fed into the classiﬁcation network\nas in R-CNN [8]. The outputs of this network consist of two",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 72,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  },
  {
    "content": "ﬁer. The image region is cropped from a proposal, warped\nto 224\u0002224 pixels, and fed into the classiﬁcation network\nas in R-CNN [8]. The outputs of this network consist of two\nsibling fc layers for clsandreg, also in a per-class form.\nThis R-CNN network is ﬁne-tuned on the training set us-\ning a mini-batch size of 256 in the RoI-centric fashion. For\ntesting, the RPN generates the highest scored 200 proposals\nfor each predicted class, and the R-CNN network is used to\nupdate these proposals’ scores and box positions.\nThis method reduces the top-5 localization error to\n10.6% (Table 13). This is our single-model result on the\nvalidation set. Using an ensemble of networks for both clas-\nsiﬁcation and localization, we achieve a top-5 localization\nerror of 9.0% on the test set. This number signiﬁcantly out-\nperforms the ILSVRC 14 results (Table 14), showing a 64%\nrelative reduction of error. This result won the 1st place in\nthe ImageNet localization task in ILSVRC 2015.\n12",
    "metadata": {
      "source": "resnet_paper",
      "description": "Deep Residual Learning for Image Recognition",
      "chunk_id": 73,
      "total_chunks": 74,
      "file_type": "pdf"
    }
  }
]